<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->
<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->
<!-- generator="WordPress/4.5" created="2016-04-14 09:15" -->
<rss xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/" version="2.0" xmlns:dsq="http://disqus.com/disqus-internals">

<channel>
	<title>eppz!</title>
	<link>http://sandbox.blog.eppz.eu</link>
	<description>Just another WordPress site</description>
	<pubDate>Thu, 14 Apr 2016 09:15:53 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://sandbox.blog.eppz.eu</wp:base_site_url>
	<wp:base_blog_url>http://sandbox.blog.eppz.eu</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[eppz]]></wp:author_login><wp:author_email><![CDATA[hello@eppz.eu]]></wp:author_email><wp:author_display_name><![CDATA[eppz!]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename><![CDATA[your-picks]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Your picks]]></wp:cat_name></wp:category>

	<generator>https://wordpress.org/?v=4.5</generator>

	<item>
		<title>Reachability with blocks for everyday use</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/06/15/reachability-with-blocks/</link>
		<pubDate>Sat, 15 Jun 2013 19:06:47 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=241</guid>
		<description/>
		<content:encoded><![CDATA[As I developed a web service and the matching iOS client, I arrived at a point where I wanted to wrap every request I send into a wrapper incorporating hostname reachability with blocks on success/error or simply on completition.

[caption id="attachment_740" align="alignnone" width="1280"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/reachability_with_blocks1.png"><img class="size-full wp-image-740" alt="Reachability with blocks for everyday use" src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/reachability_with_blocks1.png" width="1280" height="720" /></a> Reachability should be this simple, free from notifications, run loops, any weird stuff.[/caption]

[github message="go using" name="eppz!reachability" url="https://github.com/eppz/eppz-reachability"]

[note]I tried to test it on my local server, which I can reach over a local/private/non-routable IP address from test devices. But as it turned out (after days of struggling with numerous third-praty Reachability implementations) Reachability <strong>won't ever call back when I pass in an IP address as input</strong>, at least with my network setup (which is like every network setup as far as I know). The discussion of this issue is dispatched on a separate thread at <a title="Why asynchronous SCNetworkReachability not works with IP addresses" href="http://eppz.eu/blog/?p=260" target="_blank">Why asynchronous SCNetworkReachability not works with IP addresses</a>?.[/note]

<h2><strong>Preliminaries</strong> leading to rewrite reachability with blocks</h2>

All in all, I decided to dig deeper into <a title="iOS Developer Library - Reachability" href="http://developer.apple.com/library/ios/#samplecode/Reachability/Introduction/Intro.html" target="_blank">Apple's sample code</a> (and documentation) and understand all those seemingly weird things, then get rid of the most. In the end I found that <strong>asking for a host Reachability is actually three lines of code</strong>.

<pre>
SCNetworkReachabilityRef reachabilityRef = SCNetworkReachabilityCreateWithName(NULL, [@&quot;google.com&quot; UTF8String]);
SCNetworkReachabilityFlags reachabilityFlags;
SCNetworkReachabilityGetFlags(reachabilityRef, &amp;reachabilityFlags);
</pre>

No more. Three innocent lines of code. <strong>No notifications</strong> (which I instinctively don't like), <strong>no run loops</strong>, <strong>no any weird stuff</strong>, like external setting an objects instance variables. Just the pure feature. The sample above uses a synchronous call I found in [class]SCNetworkReachabiliy[/class] documentation called [class]SCNetworkReachabilityGetFlags[/class] (<a title="SCNetworkReachabilityGetFlags" href="http://developer.apple.com/library/ios/documentation/SystemConfiguration/Reference/SCNetworkReachabilityRef/Reference/reference.html#//apple_ref/c/func/SCNetworkReachabilityGetFlags" target="_blank">see documentation</a>).

[note]Of course you need to import <strong>&lt;SystemConfiguration/SystemConfiguration.h&gt;</strong> framework where these functions live. The official code has some mention on encourage the async implementation (with the callback function and runLoop scheduling) since in some cases network communication can reach over 30 seconds, and blocking the main thread for such a duration leads to terminate the application by the OS.[/note]

Anyway, <strong>blocking the main thread even for a second is not too user friendly</strong>, so it is fairly understandable (this convienced me to implement reachability with blocks actually instead of using simply the synchronous way). Also when you want to constantly listen for network changes, you cannot use the sync solution above. Actually <strong>the async method is also really a few lines of code</strong>.

<pre>
static void reachabilityCallback(SCNetworkReachabilityRef reachabilityRef, SCNetworkReachabilityFlags flags, void* info)
{
    RCViewController *viewController = (__bridge RCViewController*)info; //Cast context object.
    [viewController showReachabilityFlags:flags]; //Show.

    //Tear down reachability.
    SCNetworkReachabilityUnscheduleFromRunLoop(reachabilityRef, CFRunLoopGetMain(), kCFRunLoopDefaultMode);
    CFRelease(reachabilityRef);
}

-(void)reach:(NSString*) hostName
{
    //Create with context.
    SCNetworkReachabilityRef reachabilityRef = SCNetworkReachabilityCreateWithName(NULL, [hostName UTF8String]);
    SCNetworkReachabilityContext context = {0, (__bridge void*)self, nil, nil, nil};

    if (NO) //The synchronous way.
    {
        //Get flags.
        SCNetworkReachabilityFlags flags;
        SCNetworkReachabilityGetFlags(reachabilityRef, &amp;flags);

        [self showReachabilityFlags:flags]; //Show.
    }

    else //The asynchronous way.
    {
        //Set callback, then register.
        SCNetworkReachabilitySetCallback(reachabilityRef, reachabilityCallback, &amp;context);
        SCNetworkReachabilityScheduleWithRunLoop(reachabilityRef, CFRunLoopGetMain(), kCFRunLoopDefaultMode);
    }
}
</pre>

You can see how to hook up the C callback with Objective-C code using a reference to the viewController as a context of reachability. So <strong>this method also free of any notification, and is as Cocoa as it can</strong>.

Knowing this it is really a pleasure to wrap it to a class that fits some usual use-cases, like a block based on-demand reachability test, and a reachability listener with a delegate connection.
<h2><strong>Reachability with blocks</strong> for everyday use</h2>
I did implement such a wrapper (with a workaround aiming the IP address issue), so if you need a drop-in "reachability with blocks" class grab <a title="eppz!reachability at GitHub" href="https://github.com/eppz/eppz-reachability" target="_blank">eppz!reachability at GitHub</a>. The client code for this is <strong>really a one-liner</strong>.

<pre>
//Get status on-demand.
[EPPZReachability reachHost:@&quot;eppz.eu&quot; completition:^(EPPZReachability *reachability)
{ if (reachability.reachable) [self postSomething]; }];
</pre>

For constantly listening reachability, I <strong>kept a delegate-based imlementation</strong>, again, with the lowest possible impact on controller code.

<pre>
//Listen.
[EPPZReachability listenHost:hostNameOrIPaddress delegate:self];

//Get notified.
-(void)reachabilityChanged:(EPPZReachability*) reachability
{ if (reachability.reachableViaCellular) [self skipThumbnails]; }
</pre>

You can inspect it in action in the testbed project along it's really thin controller implementation.

[caption id="attachment_734" align="alignnone" width="396"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/reachability_with_blocks.png"><img class=" wp-image-734 noShadow" alt="Testbed for eppz!reachability (implementing reachability with blocks)." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/reachability_with_blocks.png" width="396" height="744" /></a> You can play around with both synchronous and asynchronous way of reachability, watch the network come and go, or get closer to the lower level flags if you feel explorous to.[/caption]

[github message="See" name="RCReachabilityClientViewController.m" url="https://github.com/eppz/eppz-reachability/blob/master/eppz!reachability/RCReachabilityClientViewController.m"]

I can think of a category on this with some more convenient factory methods with separate blocks for every outcome to spare that [class]if[/class] statement in completition, but the main point was here is the block-based manner.]]></content:encoded>
		<excerpt:encoded><![CDATA[All in all, I decided to dig deeper into Apple’s sample code (and documentation) and understand all those seemingly weird things, then get rid of the most. In the end I found that asking for a host Reachability is actually three lines of code. No more than <strong>three innocent lines of code.</strong>]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 19:06:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 19:06:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reachability-with-blocks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-design_"><![CDATA[Code design]]></category>
		<category domain="post_tag" nicename="encapsulation"><![CDATA[Encapsulation]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="category" nicename="my-picks"><![CDATA[My picks]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="reachability"><![CDATA[Reachability]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[reachability with blocks]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[I wanted to wrap every request I send into a wrapper incorporating hostname reachability with blocks on success/error or simply on completition.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[simpliest-reachability-ever]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1799]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4745198308]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Miguel Miranda]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dundyx@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://mems.cl</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[201.222.174.218]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-13 01:16:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-13 01:16:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Friend, im from chile so my english it's a little rusty... 

let me explain to you... i need to develop an app and it sound very simple but right now im kinda messed up with code... i need to find out if im on internet open an url https://blablabla.... but if im on intranet (vpn and stuff)  open the same url but with http://blablabla protocol... without the "S", can you help me please

right now i was trying to use the scnetworkreachabilitycreatewithname but the flags just works with hostnames and not with IP address... i was thinking that maybe... i can check out a valid ip address to check if its conected to the vpn... and if its not valid then open the other url
 if you have another idea please let me know!!!!! tnks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578641.8975260257720947265625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1410570967.4501531124114990234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112721.933795928955078125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005084]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Push Git to FTP</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/06/18/git-to-ftp/</link>
		<pubDate>Tue, 18 Jun 2013 16:49:38 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=282</guid>
		<description/>
		<content:encoded><![CDATA[With some lightweight web-releated project, I often found that <strong>pushing a particular Git revision to the production server </strong> - forming a Git to FTP bridge - could be a really convenient part of the workflow. For example editing/versioning the theme for this blog is this kind of issue.

[caption id="attachment_674" align="alignnone" width="1280"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/push_git_to_ftp.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/push_git_to_ftp.png" alt="Having a custom action pushing git to ftp at your fingertips can simplify production code deployment." width="1280" height="598" class="size-full wp-image-674" /></a> Having a custom action pushing git to ftp at your fingertips can simplify production code deployment.[/caption]

I'm using <a title="SourceTree - A free Git client for Windows or Mac" href="http://www.sourcetreeapp.com/" target="_blank"><strong>SourceTree</strong></a> (for Mac OSX) to manage my Git repositories, which has a <a title="SourceTree Blog - Custom Actions" href="http://blog.sourcetreeapp.com/2012/02/08/custom-actions-more-power-to-you/" target="_blank"><strong>"Custom Action"</strong></a> feature fortunately that can execute shell scripts with some parameters passed in about the current repository (actually about the current working copy).

In the meanwhile <a title="git-ftp on GitHub" href="https://github.com/git-ftp/git-ftp" target="_blank">René Moser made a useful command-line tool to called <strong>git-ftp</strong></a> (surprisingly) to perform the same task I outlined above. <strong>I'd prefer a GUI setup</strong>, though, that is more close to my workflow.

So the only thing left is to hook up these parts together. I'm thinking of writing a step-by-step tutorial here, since I could be exhausting to get these things together for people like me without a reliable knowledge on weird terminal commands and pesky shell scripts.
<h2><strong>0. Show hidden files.</strong></h2>
Type into terminal (at any location):

<pre>
defaults write com.apple.Finder AppleShowAllFiles YES
killall Finder
</pre>
<h2><strong>1. Install git-ftp</strong> (will be installed in /usr/local/bin).</h2>
Type into terminal (at any temporary download location):

<pre>
git clone https://github.com/git-ftp/git-ftp.git
cd git-ftp
git checkout master
sudo make install
</pre>

[note]Or you can check a more complete installation guide at the <a title="git-ftp Install" href="https://github.com/git-ftp/git-ftp/blob/develop/INSTALL.md" target="_blank">git-ftp project page INSTALL.md</a>. Not that you'll need administrator (super user) access for the last command.[/note]

<h2><strong>2. Add a tiny shell-script</strong> (bridge between SourceTree and git-ftp).</h2>
Grab (or create) these - <a href="http://eppz.eu/blog/wp-content/uploads/gitFtpInit.sh">gitFtpInit.sh</a>, <a href="http://eppz.eu/blog/wp-content/uploads/gitFtpPush.sh">gitFtpPush.sh</a> - shell script, and put it near you brand new git-ftp installation in [class]/usr/local/bin[/class].

Seems you have to restore the scripts' chmod to work properly, so make them execuable using [xCode]chmod[/xCode].
<pre>
chmod +x /usr/local/bin/gitFtpInit.sh
chmod +x /usr/local/bin/gitFtpPush.sh
</pre>

[note]Thanks, <a href="http://frederic-soler.fr/" title="Je suis un digital addict!" target="_blank">Frédéric</a>.[/note]

<h2><strong>3. Configure Custom Git to FTP Action in SourceTree.</strong></h2>
Open <a title="SourceTree - A free Git &amp; Mercurial client for Windows or Mac." href="http://www.sourcetreeapp.com/" target="_blank">SourceTree</a> Preferences/Custom Actions then Add.
In <a title="SourceTree - A free Git &amp; Mercurial client for Windows or Mac." href="http://www.sourcetreeapp.com/" target="_blank">SourceTree</a> preferences create a custom action by providing some basic setting.

<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/4a_push.png"><img class=" wp-image-331 alignnone" title="Configure Custom Git to FTP Action in SourceTree" alt="Configure Custom Git to FTP Action in SourceTree" src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/4a_push.png" width="500" height="329" /></a>

Add a name for the action, a path to the script from step 2., then provide some parameter hooks to the script: [class]$REPO (FTP username) (FTP password) (FTP path)[/class].

[note]Note that you not just provide the FTP host but <strong>the full FTP path where you want to deploy your code</strong>. Something like <strong>ftp://&lt;FTP host&gt;/&lt;path to directory&gt;</strong>. Also checking Show Full Output is a good idea to see git-ftp responses/process.[/note]

<h2><strong>4. First run</strong> (let git-ftp setup some stuff on FTP)</h2>

For the first time git-ftp need to do some setup at your FTP server. So you should run the action with the initialization script [class]gitFtpInit.sh[/class] (only for the first time!), so change it temporary in your action definition.

[caption id="attachment_334" align="alignnone" width="500"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/4b_init.png"><img class=" wp-image-334" title="Configure Custom Git to FTP Action in SourceTree" alt="Configure Custom Git to FTP Action in SourceTree" src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/4b_init.png" width="500" height="329" /></a> For the first time, you should run the initializer script (gitFtpInit.sh) instead of the push script you'll be using anyway.[/caption]

Run the action, see it initialized, be happy.

[caption id="attachment_335" align="alignnone" width="500"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/4c_run.png"><img class=" wp-image-335" title="SourceTree Custom Git to FTP Action with git-ftp" alt="SourceTree Custom Git to FTP Action with git-ftp" src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/4c_run.png" width="500" height="304" /></a> A pretty handy way to launch such action is just by a right click on a particular revision.[/caption]

You should undo the changes you've made in action definition, so write back the script name to [class]gitFtpPush.sh[/class], and done.

<strong>Having this you can easily push your latest state of your working copy to the FTP you specified.</strong> Be warned that git-ftp expects that no other people (nor you) is going to modify the deployed files in any other way than pushing with this tool (as you can see this stated in <a title="git-ftp Limitations" href="https://github.com/git-ftp/git-ftp#limitations" target="_blank">Limitations</a> section of the project page).]]></content:encoded>
		<excerpt:encoded><![CDATA[With some lightweight web-releated project, I often found that <strong>pushing a particular Git revision to the production server</strong> – forming a Git to FTP bridge – could be a really convenient part of the workflow. For example, I'm using the same technique for editing/versioning the theme for this blog.]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date><![CDATA[2013-06-18 16:49:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-18 16:49:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git-to-ftp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-design_"><![CDATA[Code design]]></category>
		<category domain="post_tag" nicename="code-management"><![CDATA[Code management]]></category>
		<category domain="post_tag" nicename="ftp"><![CDATA[FTP]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_tag" nicename="mamp"><![CDATA[MAMP]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
		<category domain="category" nicename="workflow"><![CDATA[Workflow]]></category>
		<category domain="post_tag" nicename="workflow-2"><![CDATA[Workflow]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[git to ftp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[I often found that pushing a particular Git revision to the production server - forming a Git to FTP bridge - could be a convenient part of the workflow.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[push-a-git-repository-to-an-ftp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[push-git-to-ftp]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1798]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4739770448]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Frédéric]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[soler.frederic@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://frederic-soler.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.16.225.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-28 10:46:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-28 10:46:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
Thanks for the tut!
But the two .sh files are not available anymore. 
Can I have access to this please?
Thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375008372.0354731082916259765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375089149.7741138935089111328125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005178]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_899d138f2cf24465b0791b00b53fc7cf</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/899d138f2cf24465b0791b00b53fc7cf</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.253.214.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-29 09:13:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-29 09:13:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the spot, just fixed the URLs.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>6</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375089195.3758800029754638671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005178]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005224]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Frédéric]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[soler.frederic@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://frederic-soler.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.16.225.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-07-29 21:40:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-07-29 21:40:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi again !
Thanks for files !
I've tried your method but I've got this error message  

git LocalPath userName Psswd RemotePath (variables are well implemented, that's just for the example ...)
launch path not accessible
Completed with errors, see above
 
Do I miss something ? 
I'm sorry, I'm a beginner with GIT, Sourcetree ...
Really thanks for your help !]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375134023.31466388702392578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005189]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_899d138f2cf24465b0791b00b53fc7cf</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/899d138f2cf24465b0791b00b53fc7cf</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Frédéric]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[soler.frederic@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://frederic-soler.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.16.225.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-08-04 21:44:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-08-04 21:44:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
I'm sorry but I really not achieve to get your script work :(
I've tried everything but nothing work. I always get this message "launch path not accessible".
Do you know what can be the problem ? My Mac install maybe ? 
Thanks for you help.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375652658.5739839076995849609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005185]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_899d138f2cf24465b0791b00b53fc7cf</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/899d138f2cf24465b0791b00b53fc7cf</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.253.214.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-08-05 15:01:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-08-05 15:01:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Probaly the launch path is not accessible. :D
Double check everything:
Is git-ftp properly installed at <em>/usr/local/bin/</em>?
Do you typed the same path at 'Script to run:' field <em>/usr/local/bin/gitFtpPush.sh</em>?
Do you have administrator (super user) privileges?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>8</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375714868.3993930816650390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005189]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005226]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Frédéric]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[soler.frederic@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://frederic-soler.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.85.202.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-08-16 21:54:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-08-16 21:54:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
thanks for your answer !
I've took my time to try to solve my problem. 
Unfortunately, I've removed all my install and do it once again.
I've installed homebrew, grep ... and then git-ftp but I've always got this error :

git /Applications/MAMP/htdocs/Folder username password ftp://ftp.url.com 
launch path not accessible
Completed with errors, see above 

... 
Is git-ftp properly installed at /usr/local/bin/? &gt; only an exec file. Is it OK? 
Do you typed the same path at ‘Script to run:’ field /usr/local/bin/gitFtpPush.sh? &gt; Yep! And tried with the Init file for first time.
Do you have administrator (super user) privileges? &gt; Yep! I'm admin. 

Is there something I need to do on Mountain Lion to install GIT or something else?
Thanks for your help. 
That drives me crazy :(]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>10</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1376690083.6678779125213623046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005226]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005363]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_899d138f2cf24465b0791b00b53fc7cf</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/899d138f2cf24465b0791b00b53fc7cf</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.190.240]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-08-29 03:54:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-08-29 03:54:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Scripts need to be set executable (I think something gone wrong during downloading):
<em>chmod +x /usr/local/bin/gitFtpInit.sh</em>
<em>chmod +x /usr/local/bin/gitFtpPush.sh</em>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>11</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1377748486.3244059085845947265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005363]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005582]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Frédéric]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[soler.frederic@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://frederic-soler.fr</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.16.225.7]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-07 11:20:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-07 11:20:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey,
How are you?
Your last trick made the stuff works. No "launch path ..." anymore !
Now i've got another pblm : 

git /Applications/MAMP/htdocs/XXX username psswd ftp://ftp.XXX.XXX/www/ 
Switching directory to repository root at '/Applications/MAMP/htdocs/XXX'
Pushing latest checkout to 'ftp://ftp.XXX.XXX/www/' with the given credentials
/usr/local/bin/gitFtpPush.sh: line 17: /usr/local/bin/git-ftp: is a directory
Completed successfully

The files are not updated at all... 
It seems to not work. 
I think I'm really too bad for all this GIT stuffs :D

Have you already seen that kind of issue ? 
Thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378552819.41703510284423828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005184]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_899d138f2cf24465b0791b00b53fc7cf</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/899d138f2cf24465b0791b00b53fc7cf</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.253.214.210]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-10 09:11:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-10 09:11:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[:D
This is not GIT stuff actually, this is a third party module.
I can't see error message in what you posted above.
If your path were wrong, git-ftp would tell you something about it.

Is there any files/changes committed anyway?
Seems there is nothing to push.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>13</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378804267.018498897552490234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005184]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005222]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[xCode color scheme with a sense | eppz!]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://eppz.eu/blog/xcode-color-scheme-with-a-sense/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[5.159.233.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-02 00:21:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-02 00:21:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] colors can be customized along the categories they stand for. At this point I started to design eppz!xCode color scheme, with a strong sense behind color [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391300486.4553720951080322265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391302761.6517140865325927734375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Forrest]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[flagace@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[69.54.2.250]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-05 05:11:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-05 05:11:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think I am having issues with the correct formatting of the parameters 

I am having the following error (edited for security)
git ftp://ftp.mysite.com $PATH username mypassword public_html 
launch path not accessible
Completed with errors, see above


What is the correct parameter formatting no extra characters?

$REPO ftp://ftp.mysite.com $PATH username mypassword public_html
$REPO ftp://ftp.mysite.com $PATH   
$REPO ftp://ftp.mysite.com $PATH (username) (mypassword) (public_html)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391577086.2106139659881591796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393686336.4258289337158203125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005182]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-01 15:08:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-01 15:08:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Have you made the scripts accessible?

<pre>
chmod +x /usr/local/bin/gitFtpInit.sh
chmod +x /usr/local/bin/gitFtpPush.sh
</pre>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>16</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393686497.818890094757080078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005182]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005223]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-01 15:12:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-01 15:12:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Correct formatting is:
<pre>
$PATH username mypassword ftp://mysite.com/directory/where/files/are/to/go
</pre>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>16</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393686772.838263988494873046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005182]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005221]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Banago]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[banago@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://wplancer.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[217.21.150.193]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-03 16:37:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-03 16:37:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've also written a little PHP script that that does deployments through FTP. It si called PHPloy and is tightly-coupled with Git to determine what which files where edited/added/deleted and uploads them accordingly. You put your FTP details in a deploy.ini file and run just a command to deploy:

    <code class="bash">phploy</code>

You can also deploy to multiple servers at once. And if you have multiple servers configured, you can select to deploy to one of them like this:

      <code class="bash">phploy --server staging</code>

There is more that can be done - check it out on Github: https://github.com/banago/PHPloy]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393864655.23089599609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394792225.35546398162841796875;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005180]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_48ec092dc75e2ef815d74b21b154cc25</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/48ec092dc75e2ef815d74b21b154cc25</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Mathieu]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bujold.mathieu@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[72.10.144.170]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-06-16 16:01:59]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-06-16 16:01:59]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great tutorial...

I have and error Remote host not set.
Do you have any idea where can be the issue.


Mathieu]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578620.246838092803955078125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1402934519.248538970947265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112795.7953870296478271484375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005186]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[Gabriel]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[gabyrsh@yahoo.com.ar]]></wp:comment_author_email>
			<wp:comment_author_url>http://-</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[190.247.10.187]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-06-30 01:10:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-06-30 01:10:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice Tutorial,
But I am faciing the following issue, I am trying to run the first script in Custom Action and the following message appears:
"/usr/local/bin/git-ftp: line 411: /usr/bin/curl: Argument list too long
fatal: Could not upload files., exiting..

Could you help me?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578621.06521892547607421875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404090636.41335296630859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112792.1823699474334716796875;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005188]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[Carisa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ctong1124@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[50.177.174.107]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-25 22:31:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-25 22:31:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I'm having a little trouble getting this set up. I'm running the custom action through SourceTree with the gitFtpInit.sh file right now. 

When I run it with $REPO as the parameter I'm getting this

git /Users/Carisa/Documents/sublime/portfolio USERNAME PASSWORD FTPPATH
fatal: Could not upload files., exiting...
Switching directory to repository root at '/Users/Carisa/Documents/sublime/portfolio'
Pushing latest checkout to 'FTP PATH' with the given credentials
There are 1254 files to sync:
[1 of 1254] Buffered for upload '404.html'.
[2 of 1254] Buffered for upload 'CHANGELOG.md'.
###and on with buffering...
Uploading ...
Completed successfully

but nothing is showing up on the webpage. is that fatal on the second line causing the trouble?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578646.3855121135711669921875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411684307.790852069854736328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112709.68556308746337890625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005174]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[Mr Brainz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[brainz@slicknfresh.co.uk]]></wp:comment_author_email>
			<wp:comment_author_url>http://djbrainz.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[195.167.134.220]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-11-03 13:24:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-11-03 13:24:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for saving my fingers from Terminal hell! El Capitan clears the Bash history so I couldn't up key to previous commits anymore. This is a dream. Cheers.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1446557091.837152004241943359375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459886827.5167338848114013671875;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005177]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_29f1eacc1ab7faa341207333df71bdde</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/29f1eacc1ab7faa341207333df71bdde</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[John LaCroix]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[contact@johnlacroix.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[76.105.193.71]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-01-28 22:46:14]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-01-28 22:46:14]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[this works great but I noticed it didn't remove files when I removed them from the git repo. Is there a fix for that?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1454021174.140284061431884765625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459886811.6556251049041748046875;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005181]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[John LaCroix]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[contact@johnlacroix.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[76.105.193.71]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-01-28 22:47:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-01-28 22:47:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Forget what I just said, I didn't change to gitFtpPush.sh. Now it removes the file. AWESOME!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1454021274.3224198818206787109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459886833.81245708465576171875;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005179]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Ray Lawlor]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ray.lawlor@elmhousecreative.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://elmhousecreative.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[109.148.227.192]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-02-19 23:21:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-02-19 23:21:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi all,

I'm getting an error:

Couldn't posix_spawn: error 8

When trying to either Init or Push using the scripts. Anyone seen this or know how to fix?

Ray]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459886781.8696949481964111328125;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1455924062.60050296783447265625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005183]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_cc210a91bc9f2a3e278c51c143c7ff20</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/cc210a91bc9f2a3e278c51c143c7ff20</dsq:avatar></dsq:remote></wp:comment>
	</item>
	<item>
		<title>5 approach to load UIView from Xib</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/06/18/uiview-from-xib/</link>
		<pubDate>Tue, 18 Jun 2013 18:17:04 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=304</guid>
		<description/>
		<content:encoded><![CDATA[[caption id="attachment_1379" align="alignnone" width="1156"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/UIView_from_Xib_tangram.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/UIView_from_Xib_tangram.png" alt="Custom views are best maintainable in separate Xib files, so a convenient workflow for loading UIView from Xib is gold." width="1156" height="1156" class="size-full wp-image-1379" /></a> Custom views are best maintainable in separate Xib files, so a convenient workflow for loading UIView from Xib is gold.[/caption]

[note]If you're not feeling that explorous, you could skip to the article that tops up these methods introducing <a href="http://eppz.eu/blog/uiview-from-xib-simplest/" title="Custom views are best maintainable in separate Xib files, so a convenient workflow for loading UIView from Xib is gold." target="_blank">Simplest way to load UIView from Xib</a>.[/note]

After the past few years I found that the only manageable way for creating/maintaining view (or any UI element in more general) is to <strong>instantiate the UIView from Xib file</strong>. Creating/designing is far more intuitive in Interface Builder than write layout code, defining layout constants (dimensions, colors), or even worse introduce magic numbers to nudge the elements all around.

I'm planning to introduce 5 methods below, I've been used each of them in different circumstances over the times.

<h2><strong>1. The plain way</strong> (the poor man's method to load UIView from XIB)</h2>

This approach works only in really the case when you don't need anything else just a view assembled in Interface Builder without any communication bindings. It has actually no any particular advantages unless it's relatively easily understanding in the beginning of the Cocoa learning process.

It uses [xCode]<a title="NSBundle UIKit Additions Reference" href="http://developer.apple.com/library/ios/#documentation/UIKit/Reference/NSBundle_UIKitAdditions/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007485" target="_blank">[NSBundle loadNibNamed:owner:options]</a>[/xCode] method with no respect only to the first parameter. <strong>Just include the lines below anywhere in you controller's implementation</strong>.

<pre>
// Instantiate the nib content without any reference to it.
NSArray *nibContents = [[NSBundle mainBundle] loadNibNamed:@"EPPZPlainView" owner:nil options:nil];

// Find the view among nib contents (not too hard assuming there is only one view in it).
UIView *plainView = [nibContents lastObject];

// Some hardcoded layout.
CGSize padding = (CGSize){ 22.0, 22.0 };
plainView.frame = (CGRect){padding.width, padding.height, plainView.frame.size};

// Add to the view hierarchy (thus retain).
[self.view addSubview:plainView];
</pre>

<strong>In interface builder you don't have to setup anything special</strong> other than a single (!) customized view that you want to instantiate in you controller. No bindings, even there is no need to specify File's owner class. You have to write you own hardcoded layout code in return (as you may noticed above).

[caption id="attachment_445" align="alignnone" width="448"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_01.png"><img class=" wp-image-445 " alt="5 approach to load UIView from Xib - In interface builder you don't have to setup anything other than a single (!) view," src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_01.png" width="448" height="240" /></a> In interface builder you don't have to setup anything other than a single (!) view with your static customized content.[/caption]

<h2><strong>2. The referenced way</strong> (a bit more explicit)</h2>

This method is a next step compared to the plain way, since it <strong>defines an explicit reference to the view</strong> we need. A bit cumbersome that you have to define an outlet property in your controller class to hook up the view with. This point makes this method <strong>too specific</strong>, or can say unportable.

<pre>
@interface EPPZViewController ()

// Define an outlet for the custom view.
@property (nonatomic, weak) IBOutlet UIView *referencedView;
// An action that triggers showing the view.
-(IBAction)showReferencedView;

@end

@implementation EPPZViewController

-(IBAction)showReferencedView
{
    // Instantiate a referenced view (assuming outlet has hooked up in XIB).
    [[NSBundle mainBundle] loadNibNamed:@"EPPZReferencedView" owner:self options:nil];

    // Controller's outlet has been bound during nib loading, so we can access view trough the outlet.
    [self.view addSubview:self.referencedView];
}

@end
</pre>

The shiny part here is that you can define a context view (actually a wrapper) in Interface Builder. That can be really useful to <strong>define the contextual layout information for the view in the XIB file</strong> (much more convenient than coded layout). But in the same time you have to be aware of the Interface Builder setup. <strong>File's Owner must be set to the instantiating controller's class and the referencedView outlet must be bound to the actual view you need.</strong>

[caption id="attachment_452" align="alignnone" width="697"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_02.png"><img class=" wp-image-452  " alt="5 approach to load UIView from Xib - File's Owner must be set to the instantiating controller's class." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_02.png" width="697" height="247" /></a> You can see that File's Owner class is set to the instantiating controller's class (EPPZViewController) and the referencedView outlet is to be bound to the actual view you want to have a reference to.[/caption]

[note]Be warned not to hook up the controller's view outlet to the wrapper view (nor if it feels instinctually right), since that would reassign the controller's view at instantiation with this empty one.[/note]

[note]This approach is also known as a UITableViewCell instantiating method (without the wrapper view), by adding a UITableViewCell to the XIB file, though, it is not the scope of the present article.[/note]

<h2><strong>3. Connected actions</strong> (some addition for the above actually)</h2>

Having a setup like above, you can easily <strong>hook up actions to the client controller sent by objects in the custom view</strong>. This could be useful, although, it still forces the view to cooperate with a given type of controller. So just define an [xCode]IBAction[/xCode] in the main controller like below.

<pre>
@interface EPPZViewController ()

@property (nonatomic, weak) IBOutlet UIView *referencedView;
-(IBAction)showConnectedActionsView;
-(IBAction)connectedActionsViewTouchedUp:(UIButton*) button;

@end

@implementation EPPZViewController

-(IBAction)showConnectedActionsView
{
    // Instantiate a referenced view (assuming outlet has hooked up in XIB).
    [[NSBundle mainBundle] loadNibNamed:@"EPPZConnectedActionsView" owner:self options:nil];

    // Controller's outlet has been bound during nib loading, so we can access view trough the outlet.
    [self.view addSubview:self.referencedView];
}

-(IBAction)connectedActionsViewTouchedUp:(UIButton*) button
{
    // Any interaction (I simply remove the custom view here).
    [button.superview removeFromSuperview];
}

@end
</pre>

[caption id="attachment_460" align="alignnone" width="551"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_03.png"><img class="size-full wp-image-460  " alt="5 approach to load UIView from Xib - Simply hook up a button event to the action you've just defined before." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_03.png" width="551" height="451" /></a> Then simply hook up a button event to the action you've just defined before.[/caption]

<h2><strong>4. Encapsulated instantiation</strong> (a step toward enlighting controller code)</h2>

Controller codes tend to be complicated. Period.

As you incorporate new features, your controller code immediately starts to grow, which you obviously strive to avoid. A step toward keep client code clean is to create <strong>a subclass for the custom view</strong>, and start to <strong>factor the instantiating features down</strong>.

The first trick here is to <strong>remove that File's Owner dependency</strong>, introducing <strong>a tiny little class</strong> [xCode]EPPZSubclassedViewOwner[/xCode] with the sole purpose of referencing the right view among XIB content. It nor even need a separate file as it is specific for this type of custom view. It <strong>lifts up the owning role from the controller's shoulder</strong>.

<pre>
@class EPPZSubclassedView;
@interface EPPZSubclassedViewOwner : NSObject
@property (nonatomic, weak) IBOutlet EPPZSubclassedView *subclassedView;
@end

@interface EPPZSubclassedView : UIView
+(void)presentInViewController:(UIViewController*) viewController;
-(IBAction)dismiss;
@end
</pre>

So as a benefit, we can introduce <strong>a class method that instantiates the given view</strong> [xCode]presentInViewController:[/xCode], then adds it to the view hierarchy. If you need different XIBs, like separate interfaces for iPhone and iPad, you can include it here as well, instead of littering the controller's code around.

In addition, <strong>the dismissal for the view [xCode]dismiss[/xCode] can also moved down here</strong>, as it has nothing to do with the controller itself. In the implementation we can tackle the whole instantiating in place, you can see the owner object in action below.

<pre>
@implementation EPPZSubclassedViewOwner
@end

@implementation EPPZSubclassedView

+(void)presentInViewController:(UIViewController*) viewController
{
    // Instantiating encapsulated here.
    EPPZSubclassedViewOwner *owner = [EPPZSubclassedViewOwner new];
    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self) owner:owner options:nil];

    // Add to the view hierarchy (thus retain).
    [viewController.view addSubview:owner.subclassedView];
}

-(IBAction)dismiss
{ [self removeFromSuperview]; }

@end
</pre>

[caption id="attachment_465" align="alignnone" width="937"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_04.png"><img class=" wp-image-465  " alt="5 approach to load UIView from Xib - In the XIB file you'll need to assign the appropriate classes (EPPZSubclassedViewOwner for File's Owner, EPPZSubclassedView for the view)." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_04.png" width="937" height="338" /></a> In the XIB file you'll need to assign the appropriate classes, like mark File's Owner as an EPPZSubclassedViewOwner instance, and EPPZSubclassedView for the view.[/caption]

[caption id="attachment_466" align="alignnone" width="424"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_05.png"><img class="size-full wp-image-466  " alt="5 approach to load UIView from Xib - Connect the view to the reference." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_05.png" width="424" height="180" /></a> Connect the view to it's reference.[/caption]

[caption id="attachment_467" align="alignnone" width="525"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_06.png"><img class=" wp-image-467  " alt="5 approach to load UIView from Xib - Connect the button event to the action." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzview_06.png" width="525" height="379" /></a> As well as the button event to the action. Since the IBAction is defined in our custom view, you should hook up the action there.[/caption]

As a result, you can <strong>watch the client code cleaning</strong>. Much better, with ain't no custom view related properties in the controller.

<pre>
@interface EPPZViewController
-(IBAction)showSubclassedView;
@end

@implementation EPPZViewController

-(IBAction)showSubclassedView
{
    // A tiny one-liner that has anything to do with the custom view.
    [EPPZSubclassedView presentInViewController:self];
}

@end
</pre>

<strong>It started to look like a reusable code</strong>, but we might still need some communication from the view towards the controller.

<h2><strong>5. Encapsulate everything</strong> (a really flexible, reusable way to load your custom UIView from XIB)</h2>

As we successfully separated the view from the controller above, we follow this approach regarding actions as well. To achieve this we introduce <strong>a thin protocol declaration</strong> [xCode]&lt;EPPZDecoupledViewDelegate&gt;[/xCode] that introduces the features to the controller, and assure the view that controller will respond to it's messages, just as every protocol does. It contains two calls [xCode]decoupledViewTouchedUp:[/xCode] and [xCode]decoupledViewDidDismiss:[/xCode] at this particular case.

<pre>
@class EPPZDecoupledView;
@interface EPPZDecoupledViewOwner : NSObject
@property (nonatomic, weak) IBOutlet EPPZDecoupledView *decoupledView;
@end

@protocol EPPZDecoupledViewDelegate
-(void)decoupledViewTouchedUp:(EPPZDecoupledView*) decoupledView;
-(void)decoupledViewDidDismiss:(EPPZDecoupledView*) decoupledView;
@end

@interface EPPZDecoupledView : UIView
// Indicate that this view should be presented only controllers those implements the delegate methods.
+(void)presentInViewController:(UIViewController<EPPZDecoupledViewDelegate>*) viewController;
-(IBAction)viewTouchedUp;
-(IBAction)dismiss;
@end
</pre>

The impelmentation now should keep a reference [xCode]delegateViewController[/xCode] for the controller, so it can forward the actions. You need to <strong>indicate that the controller has to implement delegate methods</strong>, so you'll declare the type as [xCode]UIViewController &lt;EPPZDecoupledViewDelegate&gt;[/xCode]. The rest is the same as before.

<pre>
@implementation EPPZDecoupledViewOwner
@end

@interface EPPZDecoupledView ()
@property (nonatomic, weak) UIViewController <EPPZDecoupledViewDelegate> *delegateViewController;
@end

@implementation EPPZDecoupledView

+(void)presentInViewController:(UIViewController<EPPZDecoupledViewDelegate>*) viewController
{
    // Instantiating encapsulated here.
    EPPZDecoupledViewOwner *owner = [EPPZDecoupledViewOwner new];
    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self) owner:owner options:nil];

    // Pass in a reference of the viewController.
    owner.decoupledView.delegateViewController = viewController;

    // Add (thus retain).
    [viewController.view addSubview:owner.decoupledView];
}

-(IBAction)viewTouchedUp
{
    // Forward to delegate.
    [self.delegateViewController decoupledViewTouchedUp:self];
}

-(IBAction)dismiss
{
    [self removeFromSuperview];

    // Forward to delegate.
    [self.delegateViewController decoupledViewDidDismiss:self];
}

@end
</pre>

So having this, you can setup <strong>a completely independent XIB file</strong> that knows nothing (!) about it's context. It instantiates itself, hooks up their actions on it's own. It is reusable, <strong>can be instantiated from any kind of [xCode]UIViewController[/xCode]</strong> that implements its protocol, which is stated clearly in the header.

The actions themselves doing not too much here, other that they<strong> invoke the implemented delegate methods</strong> in the controller, so it can customize its own features within, a pretty straight / strict / formal delegate pattern.

To make it <strong>more readable and explicit</strong>, we can <strong>move some declarations down to the .m file</strong>, so the header for our shiny custom view is just embodies only the client needs to know about it.

<pre>
@class EPPZDecoupledView;
@protocol EPPZDecoupledViewDelegate
-(void)decoupledViewTouchedUp:(EPPZDecoupledView*) decoupledView;
-(void)decoupledViewDidDismiss:(EPPZDecoupledView*) decoupledView;
@end

@interface EPPZDecoupledView : UIView
+(void)presentInViewController:(UIViewController<EPPZDecoupledViewDelegate>*) viewController;
@end
</pre>

So usage in the client controller just reflects these pretty neat declarations. You have to indicate that the controller gonna implement the view's delegate features, so you include [xCode]&lt;EPPZDecoupledViewDelegate&gt;[/xCode] to the interface.

<pre>
@interface EPPZViewController () <EPPZDecoupledViewDelegate>
-(IBAction)showDecoupledView;
@end

@implementation EPPZViewController

-(IBAction)showDecoupledView
{ [EPPZDecoupledView presentInViewController:self]; }

-(void)decoupledViewTouchedUp:(EPPZDecoupledView*) decoupledView
{ /* Whatever feature. */ }

-(void)decoupledViewDidDismiss:(EPPZDecoupledView*) decoupledView
{ /* Acknowledge sadly. */ }

@end
</pre>

<strong>Tada! A beautiful UI module for your project that you can customize independently leaving the controller's code alone.</strong> Having this clients of this class never have to know anything about the XIB content, nor hook up anything within.

Interface Builder setup is nearly the same as you may figured out, but as an overview, you can find the whole project with all the five methods at <a href="https://github.com/eppz/blog.UIView_from_XIB" title="Sample code for the article 5 approach to load UIView from Xib at blog.eppz.eu." target="_blank">GitHub</a>.

[github message="Inspect" name="blog.UIView_from_XIB" url="https://github.com/eppz/blog.UIView_from_XIB"]

[note]As it is common with flexible code, it needs a bit more code under the hood, but anyway sooner or later these code lines will land in a collection of reusable classes of one's own everyday framework.[/note]

<strong>This is a rough skeleton for the method</strong>, in production these classes are likely to implement presenting/dismissal animation, a model object to configure with, sometimes some UI logic shaping a more sophisticated experience, or weak delegate messaging without explicit protocol, but this is yet another story.]]></content:encoded>
		<excerpt:encoded><![CDATA[After the past few years I found that the only manageable way for creating/maintaining view (or any UI element in more general) is to <strong>instantiate the UIView from Xib file</strong>. Creating/designing is far more intuitive in Interface Builder than write layout code, defining layout constants (dimensions, colors).]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2013-06-18 18:17:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-18 18:17:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[uiview-from-xib]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="advanced"><![CDATA[Advanced]]></category>
		<category domain="post_tag" nicename="code-design_"><![CDATA[Code design]]></category>
		<category domain="post_tag" nicename="encapsulation"><![CDATA[Encapsulation]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="nib"><![CDATA[NIB]]></category>
		<category domain="post_tag" nicename="object-oriented"><![CDATA[Object oriented]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="uikit"><![CDATA[UIKit]]></category>
		<category domain="post_tag" nicename="uiview"><![CDATA[UIView]]></category>
		<category domain="category" nicename="understanding"><![CDATA[Understanding]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[xCode]]></category>
		<category domain="post_tag" nicename="xib"><![CDATA[XIB]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[85]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[uiview from xib]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[I'm planning to introduce here 5 methods to load UIView from Xib. I've been used each of them in different circumstances over the times.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[5-approach-to-load-uiview-from-xib]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1797]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4739770475]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Simplest way to load UIView from Xib | eppz!]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://eppz.eu/blog/uiview-from-xib-simplest/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[151.236.0.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-10-11 13:27:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-10-11 13:27:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] If you feel explorous, you can see all the prequisites that lead to this solution in a previous post 5 approach to load UIView from Xib. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381607644.100163936614990234375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381498056.5613949298858642578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Arturas]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[artooras@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[86.15.40.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-03 11:09:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-03 11:09:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, great article! Exactly what I was looking for. One question though. I was following your option 4 step-by-step, but when I instantiate the custom view from a viewController, I receive this error:
<i>[CustomViewOwner respondsToSelector:]: message sent to deallocated instance</i>
I use ARC, Xcode5. Any ideas what can be wrong?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383476977.193458080291748046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005190]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_c1db47dcbdcf9281a5a348d54d223b9e</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/c1db47dcbdcf9281a5a348d54d223b9e</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.190.240]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-03 19:19:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-03 19:19:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I actually recommend to use the drop-in class I've made implementing this approach. See the article http://eppz.eu/blog/uiview-from-xib-simplest/ with the referenced files on GitHub. I'm also using it in production without any issues.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>31</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383506395.8694629669189453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005190]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005213]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[J]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mutenfuzz@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[77.230.15.138]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-24 17:12:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-24 17:12:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, thanks for the great article,  it's helping me lots. I have a question though: I was also following option 4 but run into some trouble. I got my view to correctly show the default contents of the xib file, which in my case consists of a single label. The problem arises when I try to change the text of that label. I've tried setting the value right before adding the view to the owner's hierarchy:

+(void)presentInViewController:(UIViewController*) viewController{
    //Instantiating encapsulated here.
    SongSetupViewOwner *owner = [SongSetupViewOwner new];
    [[NSBundle mainBundle] loadNibNamed:@"SongSetupView" owner:owner options:nil];
    
    owner.songSetupView.songTitle.text = @"This won't work!";
    
    //Add to the view hierarchy (thus retain).
    [viewController.view addSubview:owner.songSetupView];
}

All I get is the default label text as entered in IB. I made sure the label is connected to an IBOutlet in my class SongSetupView:

@property (weak, nonatomic) IBOutlet UILabel *songTitle;

Surely I'm missing something obvious here. Any ideas?
Thanks in advance!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385315715.4968121051788330078125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385313133.5161349773406982421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005208]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-24 17:55:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-24 17:55:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My bet is the view is not yet loaded after invoke loadNibNamed.
You can populate it's value implementing the -(void)awakeFromNib template, the view is surely be loaded that time.
Or maybe you just not hooked up outlet? :)

-(void)awakeFromNib
{
    // Populate.
    self.songTitle.text = self.song.title;
}

Moving populating code out of constructor also seems to be a better design.
You may pass a song model reference to the view in constructor anyway.
Happy instantiating. :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>33</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385315715.9262340068817138671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005208]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005233]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[J]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mutenfuzz@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[89.107.48.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-25 10:25:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-25 10:25:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'll give it a try later today

Thank you!!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385375150.52641391754150390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005209]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Cheng]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[devbean@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[202.119.47.92]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-26 08:33:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-26 08:33:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice work! But I found some problems.
I did as your post said with a few changes. I removed EPPZDecoupledViewOwner and set NIB's owner to itself. And I added some IBOutlets and IBActions in the same class, EPPZDecoupledView. But when I run the code, IBOutlets are all null and when you click IBActions, the app crashed. Note I add the class with storyboard. Does this matters? I hope you could help me. Thank you!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386883484.6807329654693603515625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385454787.46893596649169921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005210]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_fda9e8d04f98c3f7fc68017352e722ef</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/fda9e8d04f98c3f7fc68017352e722ef</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-12 22:08:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-12 22:08:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Err, as far as I know, you cannot drop in a UIView into a StoryBoard by itself. You can drop it into a UIViewController only, so it will be instantiated as soon as the controller.

If you doing that way, then you are going "specific", and only have to care about implementing view features. Thus, don't have to care about instantiating at all. Simply go with the usual controller stuff (define outlets on the controller, implement logic in controller, etc.).

Anyway, me personally don't really like the idea of StoryBoard at all, as you cannot load individual objects from it on your own. Can only load controllers from it (instantiateViewControllerWithIdentifier:), but that is not what I want when I need a nicely laid out view only at a certain point.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>36</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386886097.370894908905029296875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005210]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005234]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[Rosie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rosiebeirne@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[64.37.240.100]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-21 21:42:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-21 21:42:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you have sample code of this?  When I try to implement method #5.  I receive the following error:

"no visible interface for UIViewController declares the selector delegate" for these two lines.
I added  to the calling view controller but I still receive the above errors at the below calls.
    [self.delegateViewController decoupledViewTouchedUp:self];

    [self.delegateViewController decoupledViewDidDismiss:self];]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393173215.75506591796875;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393018954.766108989715576171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005212]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[Rosie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rosiebeirne@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[67.173.79.169]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-22 01:12:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-22 01:12:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For the 5 method I receive this error:

No visible @interface for 'UIViewController' declares the selector 'decoupledViewTouchedUp:'

Do you have sample code?

Rosie]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393031527.1802051067352294921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393032187.7695140838623046875;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005211]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-22 01:24:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-22 01:24:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I suggest to go with http://eppz.eu/blog/uiview-from-xib-simplest/.
The class for that it put on GitHub at https://github.com/eppz/UIView-from-Xib
Based on the stuff discussed in this article.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>39</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393032277.757175922393798828125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005211]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005230]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[Rosie]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rosiebeirne@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[67.173.79.169]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-22 16:31:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-22 16:31:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes I have looked at that code.  But when attempting to do method 5 I receive the error:

“no visible interface for UIViewController declares the selector delegate” for the call to the delegate.

[self.delegateViewController decoupledViewTouchedUp:self]; 

I added to the calling view controller but I still receive the above errors at the below calls. And I have the ViewController declared as such:
<pre>
@interface EPPZViewController : UIViewController 
@end
</pre>
Yet I still receive the above error.  Code for the classes included.  In the XIB file I assign the appropriate classes, like mark File’s Owner as an EPPZDecoupledViewOwner instance, and EPPZDecoupledView for the view.
<pre>
#import 
@class EPPZDecoupledView;

@protocol EPPZDecoupledViewDelegate 
-(void)decoupledViewTouchedUp:(EPPZDecoupledView*) decoupledView;
-(void)decoupledViewDidDismiss:(EPPZDecoupledView*) decoupledView;
@end

@interface EPPZDecoupledView : UIView
+(void)presentInViewController:(UIViewController*) viewController;
-(IBAction)viewTouchedUp;
-(IBAction)dismiss;
@end

@interface EPPZDecoupledViewOwner : NSObject
@property (nonatomic, weak) IBOutlet EPPZDecoupledView *decoupledView;
@end

#import "EPPZSubView.h"

@interface EPPZDecoupledView ()
@property (nonatomic, weak) UIViewController  *delegateViewController;
@end

@implementation EPPZDecoupledViewOwner
@end

@implementation EPPZDecoupledView

+(void)presentInViewController:(UIViewController*) viewController
{
    //Instantiating encapsulated here.
    EPPZDecoupledViewOwner *owner = [EPPZDecoupledViewOwner new];
    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self) owner:owner options:nil];
    
    //Pass in a reference of the viewController.
    owner.decoupledView.delegateViewController = viewController;
        
    //Add (thus retain).
    [viewController.view addSubview:owner.decoupledView];
}

-(IBAction)viewTouchedUp
{
    //Forward to delegate.
    NSLog(@"In Touchup");
    [self.delegateViewController decoupledViewTouchedUp:self];
}

-(IBAction)dismiss
{
    [self removeFromSuperview];
     NSLog(@"In dismiss");
    //Forward to delegate.
    [self.delegate decoupledViewDidDismiss:self];
}

@end


#import 
#import "EPPZSubView.h"

@interface EPPZViewController : UIViewController 
@end

#import "EPPZViewController.h"

@interface EPPZViewController ()
-(IBAction)showDecoupledView;
@end

@implementation EPPZViewController

-(IBAction)showDecoupledView
{
    [EPPZDecoupledView presentInViewController:self]; }

-(void) viewDidLoad
{
    NSLog(@"In view did load");
}

-(void)decoupledViewTouchedUp:(EPPZDecoupledView *) decoupledView
{ /* Whatever feature. */
    NSLog(@"IN VC touch up");
}

-(void)decoupledViewDidDismiss:(EPPZDecoupledView*) decoupledView
{ /* Acknowledge sadly. */
    NSLog(@"IN VC touch up");
}
@end
</pre>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393086672.5667629241943359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005193]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-23 16:34:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-23 16:34:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, best is to put the whole sample code on GitHub. Gonna doit later today.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>38</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393173266.604547023773193359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005212]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005225]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-02 20:30:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-02 20:30:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, just updated the article, see updated code for fifth approch. Also gonna push the sample project to GitHub.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>41</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393792221.791534900665283203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005193]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005227]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[different color schemes]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kandace_stamey@yahoo.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://amazon.de</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[5.153.235.38]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-08-04 10:32:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-08-04 10:32:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I think your blog might be having browser compatibility issues.
When I look at your blog site in Chrome, it looks fine but 
when opening in Internet Explorer, it has some overlapping.
I just wanted to give you a quick heads up! Other then that, wonderful blog!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578632.6613199710845947265625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578742.239501953125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407148362.6116120815277099609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005191]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[Mesbah]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mesbah.t@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[202.4.125.3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-08-06 13:07:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-08-06 13:07:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm bit confused about the efficiency of this approach with table view. Say, I have a tableView where custom views are added into the table view cell. In such case, how can we retrieve the file owner for configuring the view cell wise. Table view reuses the cells and can retrieve the views (using tag). Is there a way to get the already instantiated view's owner? or Is it better if we eliminate the file owner (decoupled view approach) in such case? Let's know your thought.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407330451.0860679149627685546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578633.20322704315185546875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112788.0207569599151611328125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005196]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_bd3e68434effb910b7d57b0c90d28902</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/bd3e68434effb910b7d57b0c90d28902</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[Sandy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sanoj.kashyap@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[122.171.93.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-29 07:03:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-29 07:03:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[nice article I have got to know few concept. nice work.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411974234.9217369556427001953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578598.278520107269287109375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005195]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[Zb]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Zoebhsheikh@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[106.221.139.103]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-10-11 13:27:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-10-11 13:27:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow great article, I was planning to do the same and then I found your 5th method.

I want to use this method in my project but in my case I want to do in table cell instead of controller, I understand everything but before start I want your experience input. It will be helpful if you point me any pros or cons on applying uitableviewcell. Your input will be helpful to avoid issues. Thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578646.965097904205322265625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415579095.7142999172210693359375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413034062.23410797119140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005194]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[Alex]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tau.alexandru@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[162.222.102.47]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-10-15 01:08:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-10-15 01:08:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I receive this error :
Undefined symbols for architecture arm64:
  "_OBJC_CLASS_$_CaptionViewOwner", referenced from: objc-class-ref in CaptionView.o

CaptionViewOwner stays for EPPZSubclassedViewOwner]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578648.763432979583740234375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415579020.057949066162109375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413335287.36380100250244140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005192]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-10 00:23:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-10 00:23:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I got these kind of errors when simply `.m` files are not added to the current build target. You don't have to create owner class for every view, I'd go with this method anyway: http://eppz.eu/blog/uiview-from-xib-simplest/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>48</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415579020.895432949066162109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005192]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005228]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-10 00:24:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-10 00:24:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is nearly the same approach implemented for table cells: http://eppz.eu/blog/custom-uitableviewcell/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>47</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415579096.1925640106201171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005194]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005229]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[Charles Levesque]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dreamtooloverture@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[70.81.224.22]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-23 00:57:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-23 00:57:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Does someone know what these very useful tips looks like in Swift?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1416704249.2753579616546630859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112682.901669979095458984375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005200]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[Essa]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[raklove@msn.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[176.205.15.202]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-11-26 16:56:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-11-26 16:56:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very helpful guide. I got more information and details than Apple documentation about Nib programming guide..
:)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417020983.6810510158538818359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112674.1195299625396728515625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005197]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[phil]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ptmag.consult@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.bigwavesw.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[96.18.10.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-12-01 02:12:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-12-01 02:12:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great example!! I have a situation where my reusable view is a type of form to be filled in.  There are several placed on a view in the storyboard controlled by the "main" ViewController.

I have successfully designed the custom view in a separate xib file and am loading it correctly.  I want the main ViewController to receive information from each of the views.  Your example shows the EPPZDecoupledView receiving the IB actions.  I want to pass these action back to the "main" view controller.  How would you approach this, and handle that there are multiple copies of the custom UIView on the storyboard?  

Thanks,]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417399945.2850329875946044921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112779.6944448947906494140625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005202]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[Riccoski]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zukuvybz@hotmail.co.uk]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.riccoski.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[86.167.21.67]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-01-29 12:14:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-01-29 12:14:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Perfect just what I needed. Worked great. Shared.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422533683.19596099853515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422559827.518412113189697265625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005204]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_56752f779634695aa04af237fbeeb6a1</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/56752f779634695aa04af237fbeeb6a1</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-01-29 19:30:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-01-29 19:30:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I needed this, too. :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>54</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1422559828.146646022796630859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005204]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005232]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[kathy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shuangshuangyin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[107.197.142.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-02-06 19:25:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-02-06 19:25:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[this is so clean and concise, but i have a small question.. what if i have a button view class that will trigger another two views that displays on one uiview controller.
should i put two other viewowner as a properties in button view class or i should keep it separate  and communicate by multiple delegates. when button view triggers the view that needs to be shown, just pass the uiviewcontroller delegate at button view to the other view?
Basically I have 1 view controller and 3 xib views and I want to make these 3 xib views as a module so I only set the delegate once from the view controller. Thx]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423250735.739305973052978515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459887077.6910059452056884765625;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005207]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[Loc Pham]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pham.loc@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[113.163.154.242]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-02-09 00:51:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-02-09 00:51:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, thank you for this great tutorial. I tried following your fifth solution, but somehow, the button actions won't work.  I setup my project almost exactly as yours, but the IBAction just won't get called at all.  Does your solution work if the project use adaptive layout?

Would you be kind enough to take a quick look at what happened in my project? I created a small project just to get the button working and is placed at:  https://dl.dropboxusercontent.com/u/66024121/View_XIB.zip

Thanks in advance.
Loc Pham]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423443089.778318881988525390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459887069.4349019527435302734375;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005206]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_0af55f078d416192ed174eee11dbc435</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/0af55f078d416192ed174eee11dbc435</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[kathy]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shuangshuangyin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[107.197.142.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-02-09 18:45:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-02-09 18:45:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[also can i set the nib owner as a strong property in the custom view class?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>56</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423507506.2594048976898193359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459887063.4436500072479248046875;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005207]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005231]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[Daneo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[daneoke@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[81.246.47.138]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-03-11 09:55:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-03-11 09:55:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the interesting read.
When trying this, the subview added doesn't infer height nor width, and doesn't have constraints towards the view used by the controller. (You're using the default view, by doing addSubview).

Did you ever experience this ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1457690158.7511970996856689453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1459886838.430490970611572265625;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005216]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_cef758cd6a80995ec83945c4b9209d27</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/cef758cd6a80995ec83945c4b9209d27</dsq:avatar></dsq:remote></wp:comment>
	</item>
	<item>
		<title>Custom UITableViewCell from Xib with ease</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/06/27/custom-uitableviewcell/</link>
		<pubDate>Thu, 27 Jun 2013 11:05:57 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=511</guid>
		<description/>
		<content:encoded><![CDATA[[github message="grab the source" name="eppz!cell" url="https://github.com/eppz/eppz-cell"]

As it is common among these articles, the main point is always to <strong>keep the client code clean</strong>, resulting in some reusable, extendable class for everyday use. This article will just do the same. Ending up in a custom <a title="TechCrunch" href="http://techcrunch.com/" target="_blank">TechCrunch</a> themed table with <strong>instantiating each [class]UITableViewCell[/class] from Xib</strong> file, with a lovely one-liner hook towards the clients. I've found a public <a title="Google FeedBurner" href="http://feedburner.google.com/" target="_blank">FeedBurner</a> feed of the recent TechCrunch articles, hence the theme inspiration.

[caption id="attachment_548" align="alignnone" width="800"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_01.png"><img class="size-full wp-image-548 " alt="Custom UITableViewCell from Xib with ease - Ending up in a custom TechCrunch themed table with instantiating each UITableViewCell from Xib file." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_01.png" width="800" height="600" /></a> Having some well designed base class, the custom UITableViewCell from Xib implementation can free of any boilerplate code focusing only on design details.[/caption]

<pre>
-(UITableViewCell*)tableView:(UITableView*) tableView cellForRowAtIndexPath:(NSIndexPath*) indexPath
{
    return [TCItemCell cellForTableView:tableView
                          atIndexPath:indexPath
                      withModelSource:self];
}
</pre>

As you can see, all the instantiating, dequeue/reuse code, and configuring with model object is encapsulated within the actual [class]UITableViewCell[/class] subclass. It uses a base class [class]<strong>EPPZTableViewCell</strong>:NSObject[/class] to be introduced soon below, then extending it by adding some concrete features of the TechCrunch themed custom [class]UITableViewCell[/class].

<p style="border: 2px #9AE4E8 solid; padding: 5px;">
As this post is a subject of some public curiosity, I think I'm gonna create <strong>a Drop-in UITableViewCell from Xib snippet</strong> with three files of this method, with some few seconds tutorial on usage. If you think you gonna use it, please donate the project by <a href="https://twitter.com/intent/user?original_referer=https%3A%2F%2Ftwitter.com%2Fabout%2Fresources%2Fbuttons&region=following&screen_name=_eppz&tw_p=followbutton&variant=2.0" title="Follow eppz! on Twitter" target="_blank">following eppz! on Twitter</a> to encourage development. You're great at reading this, thanks there.<br />
</p>

<h2><strong>1. The base class</strong> (embodies loading UITableViewCell from Xib)</h2>

You can find a pretty convenient method for instantiating view's from xib files in another article - <a title="5 approach to load UIView from Xib" href="http://eppz.eu/blog/5-approach-to-load-uiview-from-xib/" target="_blank">5 approach to load UIView from Xib</a> - around here, so the base class for the cells will just use the same method. Thus, [class]<strong>EPPZTableViewCellOwner</strong>:NSObject[/class] class has the sole purpose of maintain a reference for the cells among freshly instantiated Xib content, in other words to keep the role of File's Owner in the custom [class]UITableViewCell[/class] Xib file.

[note]This utility class shows it's real advantages when you store multiply custom views in a single Xib file, like some alterations of UITableViewCells along with some customized section headers for example. Now it stands here to make the code more explicit.[/note]

<pre>
@interface EPPZTableViewCellOwner : NSObject
@property (nonatomic, weak) IBOutlet EPPZTableViewCell *cell;
+(id)ownerWithNibName:(NSString*) nibName;
@end

@implementation EPPZTableViewCellOwner
+(id)ownerWithNibName:(NSString*) nibName
{
    EPPZTableViewCellOwner *instance = [EPPZTableViewCellOwner new];
    [[NSBundle mainBundle] loadNibNamed:nibName owner:instance options:nil];
    return instance;
}
@end
</pre>

It has a factory method [class]ownerWithNibName:[/class] that creates an owner instance, then <strong>loads the given Xib content</strong> (that will hook up references defined in Interface Builder to the owner immediately). After that, we can easily access the cell later on.

I'm going to introduce the cell base class [class]EPPZTableViewCell:UITableViewCell[/class] implementation in a few graduated step for easier understanding. It also begins with a factory method, that <strong>creates a cell</strong> that can be passed back to the table, and invokes <strong>a cell configuring method</strong> [class]configureWithModel:[/class] that concrete themed subclasses can implement later on.

<pre>
@implementation EPPZTableViewCell

+(EPPZTableViewCell*)cellForTableView:(UITableView*) tableView
                          atIndexPath:(NSIndexPath*) indexPath
                      withModelSource:(id) modelSource
{
    //Create cell.
    EPPZTableViewCell *cell;
    EPPZTableViewCellOwner *owner = [EPPZTableViewCellOwner ownerWithNibName:NSStringFromClass(self)];
    cell = owner.cell;

    //Configure cell.
    id model = [modelSource modelForIndexPath:indexPath];
    [cell configureWithModel:model];

    return cell;
}

-(void)configureWithModel:(id) model
{ /* Subclass template. */ }

@end
</pre>

At the configuring section it uses a protocol [class]EPPZTableViewCellModelSource[/class] to proclaim <strong>a need for a model object for a particular [class]NSIndexPath[/class]</strong>, it is nearly the same way that [class]UITableView[/class] applies in it's [class]UITableViewDataSource[/class] protocol.

<pre>
@protocol EPPZTableViewCellModelSource
-(id)modelForIndexPath:(NSIndexPath*) indexPath;
@end
</pre>

You can implement this protocol right in you model classes, or simply in the controller code, like you usually do with all the other [class]UITableView[/class] delegate methods.

The next step is to incorporate <strong>cell reusing</strong>. Actually this is the main reason this class method needs a reference to the table.

<pre>
@implementation EPPZTableViewCell

+(NSString*)reuseIdentifier { return NSStringFromClass(self); }
-(NSString*)reuseIdentifier { return NSStringFromClass(self.class); }

+(EPPZTableViewCell*)cellForTableView:(UITableView*) tableView
                          atIndexPath:(NSIndexPath*) indexPath
                      withModelSource:(id) modelSource
{
    EPPZTableViewCell *cell;

    //Get a cell instance (either dequeue from tableView or allocate a new one).
    cell = [tableView dequeueReusableCellWithIdentifier:[self reuseIdentifier]];
    if (cell == nil)
    {
        EPPZTableViewCellOwner *owner = [EPPZTableViewCellOwner ownerWithNibName:NSStringFromClass(self)];
        cell = owner.cell;
    }

    //Configure cell.
    id model = [modelSource modelForIndexPath:indexPath];
    [cell configureWithModel:model];

    return cell;
}

-(void)configureWithModel:(id) model
{ /* Subclass template. */ }

@end
</pre>

Nothing too difficult in implementation, just uses the well designed framework methods to see if there is any reusable cell, or we have to allocate a new instance. The main thing is that we have all this encapsulated in this base class, so these codes will never litter around any subclass or controller code anymore. It uses <strong>the class name as the reuse identifier</strong>, supposing you'll create subclasses for concrete [class]UITableViewCell[/class] implementation, which seems a reasonable assumption.

There is a tiny issue that can be moved into this class, namely <strong>providing cell height information</strong>. I do it with simply measure the actual view in one of the instantiated cells. So it is reasonable to create a second class method [class]heightForTableView:atIndexPath:[/class] by which you can expose cell height information towards the clients.

To sum up [class]<strong>EPPZTabelViewCell:UITableViewCell</strong>[/class] so far, you can inspect the code at GitHub to see the skinny interface, and the implementation .m file with all the details discussed above. I moved down the [class]<strong>EPPZTableViewCellOwner:NSObject</strong>[/class] class to the entirely to remove annoying parts from the header file.

[github message="See" name="EPPZTableViewCell.h" url="https://github.com/eppz/eppz-cell/blob/master/eppz!cell/EPPZTableViewCell.h" skip_margin="yes"]

[github message="See" name="EPPZTableViewCell.m" url="https://github.com/eppz/eppz-cell/blob/master/eppz!cell/EPPZTableViewCell.m"]

[note]This may seem a bit overhead in terms of code lines, but this base class have to be written once, and you'll never have to scatter around your controller implementation with these boilerplate stuff.[/note]

Anyway, the real thing just comes after, when you put this class to work, and <strong>start implementing a concrete subclass</strong> of it.
<h2><strong>2. A concrete EPPZTableViewCell subclass</strong> (the customizing part)</h2>
As I told before, I simply want to create <strong>a really basic fronted for the TechCrunch feed</strong> (a simple JSON with predefined keys), with some colored labels, custom fonts. The result will look like this one below. I borrowed some UI details right from TechCrunch site, like colors, the Interstate typeface, and some heading style.

[caption id="attachment_539" align="alignnone" width="396"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_02.png"><img class="size-full wp-image-539 noShadow" title="Custom UITAbleViewCell from Xib with ease - I simply want to create a really basic fronted for the TechCrunch feed (a simple JSON with predefined keys), with some colored labels, custom fonts." alt="Custom UITAbleViewCell from Xib with ease - I simply want to create a really basic fronted for the TechCrunch feed (a simple JSON with predefined keys), with some colored labels, custom fonts." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_02.png" width="396" height="744" /></a> I borrowed some UI details right from TechCrunch site, like colors, the Interstate typeface, and some heading style.[/caption]

Let's <strong>create a subclass of [class]EPPZTableViewCell[/class]</strong> for this particular cell type, called [class]<strong>TCItemCell</strong>:EPPZTableViewCell[/class]. It does nothing special beside inherit all the cool features from [class]EPPZTableViewCell[/class], and declares the label outlets that needs to be configured.

<pre>
@interface TCItemCell : EPPZTableViewCell

@property (nonatomic, weak) IBOutlet UILabel *titleLabel;
@property (nonatomic, weak) IBOutlet UILabel *categoriesLabel;
@property (nonatomic, weak) IBOutlet UILabel *authorLabel;
@property (nonatomic, weak) IBOutlet UILabel *dateLabel;

@end
</pre>

Since we have put the more generic logic into the superclass, the implementation part needs to <strong>implement only one (!) method</strong>, the configuring template [class]configureWithModel:[/class] that we have defined before. This part contains the most specific, concrete pieces.

<pre>
@implementation TCItemCell

-(void)configureWithModel:(id) model
{
    //Apply typeface.
    self.categoriesLabel.font = [UIFont fontWithName:@&quot;Interstate&quot; size:self.categoriesLabel.font.pointSize];
    self.titleLabel.font = [UIFont fontWithName:@&quot;Interstate-Bold&quot; size:self.titleLabel.font.pointSize];
    self.authorLabel.font = [UIFont fontWithName:@&quot;Interstate&quot; size:self.authorLabel.font.pointSize];
    self.dateLabel.font = [UIFont fontWithName:@&quot;Interstate&quot; size:self.dateLabel.font.pointSize];

    //Add, format content.
    self.categoriesLabel.text = [[[model valueForKey:@&quot;categories&quot;] componentsJoinedByString:@&quot;, &quot;] uppercaseString];
    self.titleLabel.text = [model valueForKey:@&quot;title&quot;];
    self.authorLabel.text = [[model valueForKey:@&quot;author&quot;] uppercaseString];

    //Formatting date.
    NSDateFormatter *dateFormatter = [NSDateFormatter new];
    dateFormatter.dateStyle = NSDateFormatterFullStyle;
    NSDate *publishedDate = [NSDate dateWithTimeIntervalSince1970:[[model valueForKey:@&quot;published&quot;] floatValue]];
    NSString *dateString = [dateFormatter stringFromDate:publishedDate];
    self.dateLabel.text = dateString;
}

@end
</pre>

There is some hassle around the typefaces and the date formatting, but <strong>this class is just the right place to implement such specific UI details</strong>, far from the controller code, far from the table.

[note]If you would roll with some explicit model objects, you could simply cast it here to the given type, then configure the UI with that. Now we are going with this really loosely typed way, which I really consider error-prone, but for the sake of clarity it will do the job for now.[/note]

In the interface builder file everything happens you would expect, with the only constrain that you have to be aware of the File's Owner type.

[caption id="attachment_553" align="alignnone" width="981"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_03.png"><img class="size-full wp-image-553" alt="Custom UITableViewCell from Xib with ease - You simply set the File's Owner type to EPPZTableViewCellOwner." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_03.png" width="981" height="273" /></a> You simply set the File’s Owner type to EPPZTableViewCellOwner, and hook up it’s cell reference to the actual UITableView cell on the stage. This makes the encapsulated instantiation possible.[/caption]

[caption id="attachment_555" align="alignnone" width="966"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_04.png"><img class="size-full wp-image-555" alt="Custom UITableViewCell from Xib with ease - Also you have to set the custom class TCItemCell we've made before to the UITableViewCell." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_04.png" width="966" height="218" /></a> Also you have to set the custom class TCItemCell we've made before to the UITableViewCell.[/caption]

[caption id="attachment_559" align="alignnone" width="645"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_05.png"><img class="size-full wp-image-559" alt="Custom UITableViewCell from Xib with ease - The rest just straightforward, just hook up the corresponding labels to the IBOutlets you've defined in TCItemCell." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/06/eppzcell_05.png" width="645" height="428" /></a> The rest just straightforward, just hook up the corresponding labels to the IBOutlets you've defined in TCItemCell.[/caption]

So the custom [class]UITableViewCell[/class] is ready, and longing for get instantiated from it's carefully designed Xib file.
<h2><strong>3. The controller code</strong> (put our custom UITableViewCell from Xib in use)</h2>
<strong>Controller code is just basically the same like any other [class]UITableView[/class] implementation</strong>. Forgive me that the loading process is a bit rough (using AFNetworking's lovely asynchronous JSON loader), simply fetches the whole JSON without any particular UX towards the user, but designing such experiences is out of the current focus. Also I don't like to use direct strings as keys/keyPaths to reach data within a model collection, as I mentioned before.

<pre>
static NSString *const _feedUrl = @&quot;http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;num=10&amp;q=http://feeds.feedburner.com/TechCrunch/&quot;;

@interface EPPZViewController ()
@property (nonatomic, weak) IBOutlet UITableView *tableView;
@property (nonatomic, strong) NSDictionary *feed;
@end

@implementation EPPZViewController

#pragma mark - Load the feed content

-(void)viewDidAppear:(BOOL) animated
{
    [super viewDidAppear:animated];

    //Get feed, refresh table on completition.
    [[AFJSONRequestOperation JSONRequestOperationWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:_feedUrl]] success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON)
    {
        self.feed = JSON;
        [self.tableView reloadData];
    } failure:nil] start];
}

#pragma mark - Populate table

-(NSInteger)tableView:(UITableView*) tableView numberOfRowsInSection:(NSInteger) section
{ return [[self.feed valueForKey:@&quot;responseData.feed.entries&quot;] count]; }

//Ask for cell height trough the smart class method.
-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath*) indexPath
{ return [TCItemCell heightForTableView:tableView atIndexPath:(NSIndexPath*) indexPath]; }

//Implement the  protocol for the cell.
-(id)modelForIndexPath:(NSIndexPath*) indexPath
{ return [[self.feed valueForKey:@&quot;responseData.feed.entries&quot;] objectAtIndex:indexPath.row]; }

//And hook the cells up to the table with this promising one-liner.
-(UITableViewCell*)tableView:(UITableView*) tableView cellForRowAtIndexPath:(NSIndexPath*) indexPath
{
    return [TCItemCell cellForTableView:tableView
                          atIndexPath:indexPath
                      withModelSource:self]; //Tell that this controller provides the data for the cell.
}

@end
</pre>

The interesting part is the Populate table section. The first method is straightforward, the usual [class]tableView:numberOfRowsInSection:[/class] cell counter. The second method is uses the class method [class]heightForTableView:atIndexPath:[/class] we declared in [class]EPPZTableViewCell[/class] before. The third method provides the data/model source for each cell, trough the [class]&lt;EPPZTableViewCellModelSource&gt;[/class] protocol we created for this purpose. And my personal favorite, the fourth method provides <strong>a fully configured cell to the corresponding [class]&lt;UITableViewDelegate&gt;[/class] method with a single innocent line of code</strong>.

[github message="see the whole project " name="eppz!cell" url="https://github.com/eppz/eppz-cell" skip_margin="yes"]

If you feel a bit mixed up among the redirections incorporated here, just take a look at the prototype project <strong><a title="eppz!cell at GitHub" href="https://github.com/eppz/eppz-cell" target="_blank">eppz!cell at GitHub</a></strong> created for this article, and see the classes working together, which is actually more understandable than those features flattened out into this article.

The base class [class]EPPZTableViewCell[/class] is just a clean design as a starting point to create your own [class]UITableViewCell[/class] from Xib workflow. In some project there could be some more abstraction layers where you create more generic [class]UITableView[/class] controllers, generic models, and factories that provides many different types of properly configured [class]UITableViewCells[/class] for your tables, but that is more of a matter of the whole application code design than to fit into this article (it would be great to do anyway).]]></content:encoded>
		<excerpt:encoded><![CDATA[As it is common among these articles, the main point is always to keep the client code clean, resulting in some <strong>reusable, extendable class for everyday use</strong>. This article will just do the same. Ending up in a custom TechCrunch themed table with instantiating each UITableViewCell from Xib file.]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date><![CDATA[2013-06-27 11:05:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-27 11:05:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[custom-uitableviewcell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-design_"><![CDATA[Code design]]></category>
		<category domain="post_tag" nicename="encapsulation"><![CDATA[Encapsulation]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="nib"><![CDATA[NIB]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="uikit"><![CDATA[UIKit]]></category>
		<category domain="post_tag" nicename="uiview"><![CDATA[UIView]]></category>
		<category domain="category" nicename="understanding"><![CDATA[Understanding]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[xCode]]></category>
		<category domain="post_tag" nicename="xib"><![CDATA[XIB]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[92]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom uitableviewcell]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[This article will end up in a custom UITableViewCell from Xib file, with one line of code sparing all the UITableViewDelegate boilerplate.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-uitableviewcell-from-xib]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[custom-uitableview-cell]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1796]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4739790730]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Core Data sample managing an object queue</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/07/07/simple-core-data-sample/</link>
		<pubDate>Sun, 07 Jul 2013 10:35:26 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=742</guid>
		<description/>
		<content:encoded><![CDATA[Core Data is overmistified, at least it was by me. But after all, it just <strong>maintains objects in memory</strong>, <strong>save them to disk</strong>, then <strong>load them back</strong>. The rest of the features can wait until you really need them. Oh, and almost forget, it has <strong>nothing to do with [class]AppDelegate[/class]</strong>. So I made a really simple drop-in Core Data sample class, actually a wrapper that manages a queue of any kind of objects without hassling with the Core Data boilerplate code.

[github message="check" name="eppz!coreData" url="https://github.com/eppz/eppz-coreData"]

[caption id="attachment_799" align="alignnone" width="436"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/simple_core_data_sample.gif"><img class="size-full wp-image-799 noShadow" alt="Simple Core Data sample managing an object queue." src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/07/simple_core_data_sample.gif" width="436" height="786" /></a> I created a testbed with the typical "UITableView with some dummy entity" setup, something similar that the most Core Data tutorials is doing all around. You can see how magically the data persist between cold application launches.[/caption]

[note]It has a very thin feature set for now, since I made it to solve a specific issue. Could be a great starting point anyway to wrap Core Data around with a more friendly wrapper. Before get into the details, let me share how Core Data had demystified to me.[/note]
<h2><strong>Understanding Core Data</strong> (demystify those seemingly weird class names)</h2>
For me the best way to understanding Core Data (especially the class roles within) was to imagine <strong>what would I need to do if I wanted to create such a data storing/object graph managing framework</strong>.

First I'd like to create an object type, that is <strong>suitable to convert to a format I could write to disk</strong>. Many of the lightweight solutions do this with [class]<a title="NSKeyedArchiver, a concrete subclass of NSCoder, provides a way to encode objects (and scalar values) into an architecture-independent format that can be stored in a file." href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSKeyedArchiver_Class/Reference/Reference.html" target="_blank">NSKeyedArchiver</a>[/class], or create [class].plist[/class] based solutions. Core Data does it with [class]<a title="NSManagedObject is a generic class that implements all the basic behavior required of a Core Data model object." href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObject_Class/Reference/NSManagedObject.html" target="_blank">NSManagedObject</a>[/class]. I would definietly call them some kind of entity anyway.

I'd like to <strong>describe</strong> these object, since I'd like to know which properties I want to save, how to create connections between them when I create them at startup. Core Data does it with [class]<a title="An NSManagedObjectModel object describes a schema—a collection of entities (data models) that you use in your application." href="http://developer.apple.com/library/mac/#documentation/cocoa/reference/CoreDataFramework/Classes/NSManagedObjectModel_Class/Reference/Reference.html" target="_blank">NSManagedObjectModel</a>[/class].

At the first run, I probably would not consider this as a part of the framework, but there is a need for <strong>a place where entities living at runtime</strong>. Simply some object that retains all of the entities around, manage their lifecycle. Core Data does this with [class]<a title="An instance of NSManagedObjectContext represents a single “object space” or scratch pad in an application." href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectContext_Class/NSManagedObjectContext.html" target="_blank">NSManagedObjectContext</a>[/class].

As this imaginary framework would grow, there would be a need for <strong>factoring out disk operations</strong> to a different class. Core Data does it with [class]<a title="Instances of NSPersistentStoreCoordinator associate persistent stores (by type) with a model (or more accurately, a configuration of a model) and serve to mediate between the persistent store or stores and the managed object context or contexts." href="http://developer.apple.com/library/mac/#documentation/cocoa/reference/CoreDataFramework/Classes/NSPersistentStoreCoordinator_Class/NSPersistentStoreCoordinator.html" target="_blank">NSPersistentStoreCoordinator</a>[/class].

[note]After that, all the cool features just the consequence of such architecture. For example, as operations are stored in the object context NSManagedObjectContext (instead of write them directly to disk), this leads to a shiny undo feature. There is tons of awesome features of Core Data out there, but at this point, I really need the above three I mentioned.[/note]
<h2>A drop-in <strong>Core Data sample code</strong> managing an object queue</h2>
For my ongoing project there is a task to manage a queue of objects, and persist them across application launches. This is actually <strong>a queue for storing offline [class]<a title="The POST request method is designed to request that a web server accept the data enclosed in the request message's body for storage." href="http://en.wikipedia.org/wiki/POST_(HTTP)" target="_blank">POST</a>[/class] requests for later execution</strong>.

The first thing I wanted to achieve is to flake off Core Data initializing code from [class]AppDelegate[/class], as the first step towards felxibility. I simply extracted the official <a title="Core Data Tutorial for iOS" href="http://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/iPhoneCoreData01/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008305-CH1-SW1" target="_blank">Core Data sample</a> boilerplate code to a shiny new class [class]EPPZCoreDataObjectQueue[/class].

Creating the Core Data objects could be done in one single run instead of scatter them around to multiple lazy properties, so the initializing code consists just a few instantiation.

<pre>
//Model (describe the entities).
_managedObjectModel = [NSManagedObjectModel new];
[_managedObjectModel setEntities:@[[EPPZQueuedObject entityDescription]]];

//Coordinator (connects the entities with the SQLite store).
_persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:self.managedObjectModel];

//Context (where the entities live).
_managedObjectContext = [[NSManagedObjectContext alloc] init];
[_managedObjectContext setPersistentStoreCoordinator:self.persistentStoreCoordinator];

//Add a store (an SQLite file in Documents directory).
NSError *error;
NSURL *documents = [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
NSURL *storeURL = [documents URLByAppendingPathComponent:[NSString stringWithFormat:@&quot;%@.%@&quot;, self.name, EPPZCoreDataStoreFileExtension]];
[self.persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType
                                              configuration:nil
                                                        URL:storeURL
                                                    options:nil error:&amp;error];
[self checkForError:error];
</pre>

The second step toward flexibility, is to <strong>not define specific entity types for Core Data</strong>. This approach has many drawbacks, but as now I need only a generic object store, I decided to go this way.

Instead of define Cora Data entity description for each of my objects, I simply created <strong>a single piece of entity type [class]<a title="EPPZQueuedObject.h at GitHub" href="https://github.com/eppz/eppz-coreData/blob/master/eppz!coreData/EPPZQueuedObject.h" target="_blank">EPPZQueuedObject</a>[/class] that is capable to store any kind of object</strong>. Only restriction here is to implement [class]<a title="The NSCoding protocol declares the two methods that a class must implement so that instances of that class can be encoded and decoded." href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Protocols/NSCoding_Protocol/Reference/Reference.html" target="_blank">&lt;NSCoding&gt;</a>[/class] in model objects, since this queue archives the objects, then store them as arbitary [class]<a title="NSData and its mutable subclass NSMutableData provide data objects, object-oriented wrappers for byte buffers." href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/Reference/Reference.html" target="_blank">NSData</a>[/class] entries. It has actually two properties at all.

<pre>
@property (nonatomic, strong) NSDate *creationDate;
@property (nonatomic, strong) NSData *archivedObject;
</pre>

A third step that makes this class portable, is that I wanted to <strong>spare the [class].xcdatamodeld[/class] file</strong>, so I can freely drag this class around my projects. Having a bundle dependency is just uncomfortable. So instead of describe [class]<a title="EPPZQueuedObject.m at GitHub" href="https://github.com/eppz/eppz-coreData/blob/master/eppz!coreData/EPPZQueuedObject.m" target="_blank">EPPZQueuedObject</a>[/class] in a separate file, I <strong>included it's own entity description in the class itself</strong>.

<pre>
+(NSEntityDescription*)entityDescription
{
    //Describe EPPZQueuedObject.
    NSEntityDescription *entityDescription = [NSEntityDescription new];
    entityDescription.name = EPPZQueuedObjectEntityName;
    entityDescription.managedObjectClassName = NSStringFromClass(self);

    //Describe creationDate.
    NSAttributeDescription *creationDateDescription = [NSAttributeDescription new];
    creationDateDescription.name = @&quot;creationDate&quot;;
    creationDateDescription.attributeType = NSDateAttributeType;
    creationDateDescription.attributeValueClassName = @&quot;NSDate&quot;;
    creationDateDescription.defaultValue = nil;

    //Describe archivedObject.
    NSAttributeDescription *archivedObjectDescription = [NSAttributeDescription new];
    archivedObjectDescription.name = @&quot;archivedObject&quot;;
    archivedObjectDescription.attributeType = NSBinaryDataAttributeType;
    archivedObjectDescription.attributeValueClassName = @&quot;NSData&quot;;
    archivedObjectDescription.defaultValue = nil;

    //Add attributes.
    entityDescription.properties = @[ creationDateDescription, archivedObjectDescription ];

    //Voila.
    return entityDescription;
}
</pre>

[note]It could be more generic in the future by inspecting the object's properties, than create description of any kind of property, but after a certain point it seems not a good idea anyway to create entity descriptions manually. So <strong>this solution just fits for this particular application the best</strong>.[/note]

By having this setup, it is a few lines to save any kind of object right into the Core Data store, inspired directly by the official <a title="Core Data Tutorial for iOS" href="http://developer.apple.com/library/ios/#documentation/DataManagement/Conceptual/iPhoneCoreData01/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008305-CH1-SW1" target="_blank">Core Data sample</a>.

<pre>
//Archive object.
NSData *archivedObject = [NSKeyedArchiver archivedDataWithRootObject:object];

//Add new entry to CoreData context then configure.
EPPZQueuedObject *queuedObject = [NSEntityDescription insertNewObjectForEntityForName:EPPZQueuedObjectEntityName
                                                               inManagedObjectContext:self.managedObjectContext];
queuedObject.creationDate = [NSDate date];
queuedObject.archivedObject = archivedObject;
</pre>

This few snippets are the Core Data specific implementation details of this object queue class.

In addition, it maintains an ordered collection [class]queue[/class] of the objects passed in (this can be exposed for the clients directly, like hook up directly to a [class]UITableView[/class] as data source), and an index [class]queuedObjectsForObjects[/class] that pairs up the objects with their archived Core Data counterpart (that is actually for internal purposes only, comes handy on delete Core Data entities along object).

[github message="inspect" name="EPPZCoreDataObjectQueue.m" url="https://github.com/eppz/eppz-coreData/blob/master/eppz!coreData/EPPZCoreDataObjectQueue.m" skip_margin="yes"]

If you take a look at the implementation above, you'll get the idea.
<h2><strong>Simple Core Data usage</strong> (as a benefit of the above)</h2>
Although, I will use this object queue in my network communication class, I created a testbed with the typical <strong>[class]UITableView[/class] with some dummy entity</strong> setup, something similar that the most Core Data tutorials is doing all around. I created a [class]<a title="EPPZTimeStamp.h at GitHub" href="https://github.com/eppz/eppz-coreData/blob/master/eppz!coreData/EPPZTimeStamp.h" target="_blank">EPPZTimeStamp</a>[/class] object to be the dummy entity.

[note]Saving here happens on tap the save button, hooking it up to <strong>applicationWillTerminate:</strong> could be done in many ways, making a singleton from the object queue, or make it a property of a singleton that can be easily wired in. But let the whole Core Data stack live in AppDelegate only for this purpose is a huge overhead I think. Also it is makes difficult to create multiple Core Data stacks in a single application.[/note]

So this class [class]EPPZCoreDataObjectQueue[/class] just makes life much easier, as the client code using this in a typical controller is just some tiny method calls.

<pre>
-(void)viewDidLoad
{
    [super viewDidLoad];

    //Load queue.
    self.timeStampQueue = [EPPZTimeStampQueue new];
    [self.timeStampQueue load];
}

-(IBAction)push
{
    //Push a brand new timeStamp, update UI.
    [self.timeStampQueue pushNewObject:[EPPZTimeStamp timeStamp]];
    [self addTableRow];
}

-(IBAction)pop
{
    if (self.timeStampQueue.count &gt; 0)
    {
        //Manipulate model, update UI.
        [self.timeStampQueue popFirstObject];
        [self removeTopTableRow];
    }
}

-(IBAction)save
{ [self.timeStampQueue save]; }
</pre>

[github message="inspect" name="EPPZViewController.m" url="https://github.com/eppz/eppz-coreData/blob/master/eppz!coreData/EPPZViewController.m" skip_margin="yes"]

The full code has some details on managing the [class]UITableView[/class], you may want a look at it at <a title="EPPZViewController.m at GitHub" href="https://github.com/eppz/eppz-coreData/blob/master/eppz!coreData/EPPZViewController.m" target="_blank">GitHub</a>.

[class]EPPZCoreDataObjectQueue[/class] is just created for serve a sole purpose of object queueing, but <strong>extending such a class can end up in a very convenient/readable way of using Core Data</strong>, especially when you start subclassing it, and implement application specific features in the subclass.]]></content:encoded>
		<excerpt:encoded><![CDATA[<strong>Core Data is overmistified</strong>, at least it was by me. But after all, it just maintains objects in memory, save them to disk, then load them back. The rest of the features can wait until you really need them. Oh, and almost forget, <strong>it has nothing to do with AppDelegate</strong>.]]></excerpt:encoded>
		<wp:post_id>742</wp:post_id>
		<wp:post_date><![CDATA[2013-07-07 10:35:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-07 10:35:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[simple-core-data-sample]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-design_"><![CDATA[Code design]]></category>
		<category domain="post_tag" nicename="core-data"><![CDATA[Core Data]]></category>
		<category domain="post_tag" nicename="demistify"><![CDATA[Demistify]]></category>
		<category domain="post_tag" nicename="encapsulation"><![CDATA[Encapsulation]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="object-oriented"><![CDATA[Object oriented]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<category domain="post_tag" nicename="understanding"><![CDATA[Understanding]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[core data sample]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[So I made a really simple drop-in Core Data sample class, a wrapper that manages a queue of objects without hassling with the Core Data boilerplate code.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1790]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>5 approach to implement SpriteKit drag</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/08/12/spritekit-drag/</link>
		<pubDate>Mon, 12 Aug 2013 12:57:21 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=1151</guid>
		<description/>
		<content:encoded><![CDATA[Implementing SpriteKit drag could be tricky. On one hand you can find <strong>a running animation</strong> (I'm not sure that it is synced with [xCode]UIKit[/xCode] touch events), on the other hand you (may) have a <strong>physics simulation</strong> to fit in.

<h2>Simple <strong>SpriteKit drag</strong></h2>

If you're not using physics, and do not consider multiple touches, the you should not read the rest below actually. Simply get a touch location from [xCode]touchesBegan:[/xCode] and [xCode]touchesMoved:[/xCode] event callbacks, then adjust the location to a [xCode]node.position[/xCode] of your choice. Only thing here is to convert coordinates using the handy <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UITouch_Class/Reference/Reference.html" title="A UITouch object represents the presence or movement of a finger on the screen for a particular event." target="_blank">UITouch</a> extension [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/UITouch_SpriteKit_Additions/Reference/Reference.html" title="Returns the current location of the receiver in the coordinate system of the given node." target="_blank">locationInNode:</a>[/xCode].

For one of my prototypes, this approach was fairly enough, even with setting <strong>the node centered to the touch</strong> (was inspecting physics body collisions only).

<pre>
@interface EPPZScene ()
@property (nonatomic, weak) SKNode *draggedNode;
@end
</pre>

<pre>
-(void)touchesBegan:(NSSet*) touches withEvent:(UIEvent*) event
{ self.draggedNode = [self nodeAtPoint:[[touches anyObject] locationInNode:self]]; }

-(void)touchesMoved:(NSSet*) touches withEvent:(UIEvent*) event
{ self.draggedNode.position = [[touches anyObject] locationInNode:self]; }

-(void)touchesEnded:(NSSet*) touches withEvent:(UIEvent*) event
{ self.draggedNode = nil; }
</pre>
<h2>SpriteKit drag <strong>with physics</strong></h2>

You can embed this method into a physics world (with gravity and other forces), but that case you have to <strong>suspend physics forces while</strong> a node is dragged. Actually turning off node [xCode]dynamics[/xCode] and setting [xCode]velocity[/xCode] to [xCode]CGPointZero[/xCode] for the sake of safety seems fine, maybe you should turn off [xCode]affectedByGravity[/xCode] as well and for some cases that could be enough at all. These changes will <strong>still preserve collisions</strong> while simulating physics.

<pre>
-(void)setDraggedNode:(SKNode*) draggedNode
{
    // Previous.
    _draggedNode.physicsBody.affectedByGravity = YES;
    
        _draggedNode = draggedNode; // Set
    
    // New.
    draggedNode.physicsBody.affectedByGravity = NO;
}
</pre>

<h2><strong>Subclass SKNode</strong> adding draggable features</h2>

After a certain point of complexity, it is a really good trade to <strong>subclass [xCode]SKSpriteNode[/xCode], or [xCode]SKShapeNode[/xCode] to encapsulate dragging features</strong>. For example, even with these simple dragging cases we could incorporate a property [xCode]touchOffset[/xCode] that remembers the finger offset from [xCode]node.position[/xCode] at the time of touch has began.

<pre>
@interface EPPZDraggableShapeNode : SKShapeNode
@property (nonatomic) CGPoint touchOffset;
@end

@implementation EPPZDraggableShapeNode
@end
</pre>

Having this shape nodes like this, we can modify the previous code utilizing this awesome feature. We have to care about the actual node class that [xCode]nodeAtPoint:[/xCode] returns this time, as only [xCode]EPPZDraggableShapeNode[/xCode] has the [xCode]touchOffset[/xCode] property we want.

<pre>
-(void)touchesBegan:(NSSet*) touches withEvent:(UIEvent*) event
{
    // Get node if any.
    CGPoint touchLocation = [[touches anyObject] locationInNode:self];
    EPPZDraggableShapeNode *touchedNode = (EPPZDraggableShapeNode*)[self nodeAtPoint:touchLocation];
    if ([touchedNode isKindOfClass:[EPPZDraggableShapeNode class]] == NO) return; // Checks
    
    // Track and save offset (with the new SKNode feature).
    self.draggedNode = touchedNode;
    self.draggedNode.touchOffset =
    subtractVectorPoints(touchLocation, self.draggedNode.position);
}

-(void)touchesMoved:(NSSet*) touches withEvent:(UIEvent*) event
{
    // Align with offset (if any)
    CGPoint touchLocation = [[touches anyObject] locationInNode:self];
    self.draggedNode.position =
    subtractVectorPoints(touchLocation, self.draggedNode.touchOffset);
}

-(void)touchesEnded:(NSSet*) touches withEvent:(UIEvent*) event
{
    self.draggedNode = nil;
}
</pre>

Don't get confused about those math helpers like [xCode]subtractVectorPoints()[/xCode], just some coordinate juggling I created before. Part of <a href="https://github.com/eppz/eppz-kit/blob/master/eppz!kit/EPPZGeometry.h" title="EPPZGeometry.h at GitHub" target="_blank">[xCode]EPPZGeometry.h[/xCode]</a> if you're interested in more detail.

[github message="See" name="EPPZGeometry.h" url="https://github.com/eppz/eppz-kit/blob/master/eppz!kit/EPPZGeometry.h"]

<h2><strong>Multi-touch</strong> SpriteKit drag</h2>

Once you need multiple touches, the I found that the best way is to simply <strong>bind every touch to a node</strong>. Thats all, no touch sorting or any other overwhelming stuff. Just bind the touch to a node that has no touches yet. If you're not quiet sure about it, you can find touches in the first parameter of [xCode]touchesBegan:[/xCode].

Having this you can easily update node's position in every frame in [xCode]SKScene[/xCode]'s [xCode]update:[/xCode] method without worrying about when those touches get updated. Actually you <strong>don't even have to implement [xCode]touchesMoved:[/xCode] method at all</strong>. <strong>Only bind touches</strong> when a touch is began, then unbound the touch when it is released. You'd be surprised how simple is to going this way.

So having already subclassed [xCode]SKShapeNode[/xCode] before, we have a good place where we can encapsulate dragging features, safely away from the controller code, which I really like. Now gently move down the dragging features to [xCode]EPPZDraggableShapeNode[/xCode].

<pre>
@interface EPPZDraggableShapeNode : SKShapeNode
@property (nonatomic) CGPoint touchOffset;
@property (nonatomic, weak) UITouch *touch;
@property (nonatomic, readonly) BOOL isDragged;
-(void)bindTouch:(UITouch*) touch;
-(void)drag;
-(void)unbindTouch:(UITouch*) touch;
@end
</pre>

<pre>
@implementation EPPZDraggableShapeNode

-(BOOL)isDragged
{ return (self.touch != nil); }

-(void)bindTouch:(UITouch*) touch
{
    self.touch = touch; // Reference
    
    // Physics, and coordinate works moved here.
    CGPoint touchLocation = [self.touch locationInNode:self.scene];
    self.touchOffset = subtractVectorPoints(touchLocation, self.position);
    self.physicsBody.affectedByGravity = NO;
}

-(void)drag
{
    // If any touch bound.
    if (self.isDragged == NO) return;

    // Coordinate works moved here.
    CGPoint touchLocation = [self.touch locationInNode:self.scene];
    self.position = subtractVectorPoints(touchLocation, self.touchOffset);
}

-(void)unbindTouch:(UITouch*) touch
{
    // Unbind only if bound.
    if (self.touch != touch) return;
    
    // Physics work moved here.
    self.touch = nil;
    self.physicsBody.affectedByGravity = YES;
}

@end
</pre>

<strong>Binding touch is actually just hold a weak reference for it</strong> in [xCode]touch[/xCode] property. When you bind a certain touch, there is a good chance to save the [xCode]touchOffset[/xCode] and suspend physics, as the node is gonna be dragged from that time. You can resume physics when the touch is gonna be unbound. Now using them in the scene - for a single touch yet - goes like:

<pre>
-(void)touchesBegan:(NSSet*) touches withEvent:(UIEvent*) event
{
    // Get node if any.
    UITouch *touch = [touches anyObject];
    CGPoint touchLocation = [touch locationInNode:self];
    EPPZDraggableShapeNode *touchedNode = (EPPZDraggableShapeNode*)[self nodeAtPoint:touchLocation];
    if ([touchedNode isKindOfClass:[EPPZDraggableShapeNode class]] == NO) return; // Checks
    
    // Bind.
    [touchedNode bindTouch:touch];
    self.draggedNode = touchedNode;
}

-(void)touchesEnded:(NSSet*) touches withEvent:(UIEvent*) event
{
    UITouch *touch = [touches anyObject];
    [self.draggedNode unbindTouch:touch];
}

-(void)update:(NSTimeInterval) currentTime
{
    [self.draggedNode drag];
}
</pre>

Thing are <strong>just the same for multiple touches</strong>, with some enumerations. So while leaving the shape node subclass unchanged - beside some wording - you can enumerate [xCode]touches[/xCode] and scene [xCode]children[/xCode] to manage bindings. For production code I extracted binding management as well along some considerations, but for the sake of current article, this implementation fits well.

<pre>
-(void)touchesBegan:(NSSet*) touches withEvent:(UIEvent*) event
{
    for (UITouch *eachTouch in touches) // Enumerate touches
    {
        CGPoint eachTouchLocation = [eachTouch locationInNode:self];
        NSArray *nodes = [self nodesAtPoint:eachTouchLocation];
        for (EPPZDraggableShapeNode *eachTouchedNode in nodes) // Enumerate nodes beneath
        {
            if ([eachTouchedNode isKindOfClass:[EPPZDraggableShapeNode class]] == NO) continue; // Check class
            if (eachTouchedNode.isDragged) continue; // Skip if already bound
            [eachTouchedNode bindTouch:eachTouch];
        }
    }
}

-(void)touchesEnded:(NSSet*) touches withEvent:(UIEvent*) event
{
    for (UITouch *eachTouch in touches) // Enumerate touches
    {
        for (EPPZDraggableShapeNode *eachTouchedNode in self.children) // Enumerate nodes
        {
            if ([eachTouchedNode isKindOfClass:[EPPZDraggableShapeNode class]] == NO) continue; // Check class
            [eachTouchedNode unbindTouchIfNeeded:eachTouch];
        }
    }
}

-(void)update:(NSTimeInterval) currentTime
{
    for (EPPZDraggableShapeNode *eachTouchedNode in self.children) // Enumerate nodes
    {
        if ([eachTouchedNode isKindOfClass:[EPPZDraggableShapeNode class]] == NO) continue; // Checks
        [eachTouchedNode dragIfNeeded];
    }
}
</pre>

To avoid redundant checks, best solution would be to swizzle a [xCode]node[/xCode] property for every [xCode]UITouch[/xCode], but that is beyond the scope for now. This implementation can drag every node in you scene with theoretically <strong>unlimited number of touches</strong>. Already tested with 10 simultaneous touches, everything just went fine.

The <strong>next step could be some refined hit testing</strong> for every draggable node wrapped up to a method like [xCode]-(BOOL)isPointHit:(CGPoint) point[/xCode], or even straight to touches like [xCode]-(BOOL)isTouchHit:(UITouch*) touch[/xCode]. It is really straightforward being an [xCode]SKShapeNode[/xCode] subclass, as this kind of node has a [xCode]path[/xCode] property you can test [xCode]CGPoint[/xCode] containment against (after applied the momentary transformations). Or for circle based bodies you can simply measure a distance and test against radius.

I made a testbed project for the methods discussed above, you can find it at <a href="https://github.com/eppz/blog-spriteKitDrag" title="Try blog.SpriteKit_drag at GitHub" target="_blank">GitHub</a>. It includes everything up to this point (beside hit testing), so you can easily get a kick of what I was talking about with these bindings.

[github message="Try" name="blog.SpriteKit_drag" url="https://github.com/eppz/blog.SpriteKit_drag"]

Life for SKNodes is more complicated than just adjusting their position. The considerations those taking into account <strong>while being in a more complicated physics simulation</strong> are simply too weighted to include them in this article at code level. Let's have some word at some theoretic level below.

<h2><strong>Physics-proof</strong> multi-touch SpriteKit drag</h2>

Like said before, <strong>adjusting the position directly can not simulate real world physics</strong>, as you can still drag a ball trough a solid wall. <strong>We need a vector</strong>, a force to move with instead of adjusting position. So instead of adjusting the [xCode]node.position[/xCode] directly, we can safely adjust the [xCode]node.physicsBody.velocity[/xCode] property. 

According to my inspectations the velocity unit is measured in <strong>pixel/second</strong> that makes things much straightforward. So we need a vector that points from the current [xCode]node.position[/xCode] to the desired position, than simply scale (multiply) it by elapsed time. You can pick up an elapsed time in the [xCode]update:[/xCode] method using the [xCode]currentTime[/xCode] parameter with some counting.

Dragging still can be a node level feature, but in this case you have to create an interface something like [xCode]-(void)dragForDuration:(NSTimeInterval) frameDuration[/xCode] or something similar.

Having this <strong>collisions and joints will be evaluated gracefully during the simulation</strong> resulting in a much realistic drag experience. You cannot drag a node over a wall anymore.

<h2><strong>Avoid position flickering</strong> during a SpriteKit drag</h2>

The only thing left is that <strong>adjusting too big velocity</strong> can lead to unwanted <strong>flickering frames</strong>. Simply physics engine cannot handle those extremes. On one hand I could lower flickering by turning off any kind of bounciness (restitution) on nodes and even on the [xCode]world.physicsBody[/xCode] as well (that can stop wall bouncing surprisingly). But overtense some smring joint will still result in flickering positions.

The solution here is to <strong>introduce an itermetiate node</strong> that gets joined to the node every time you want to drag it (also need to be removed when the particular touch has ended). With a [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKPhysicsJointSpring_Ref/Reference/Reference.html#//apple_ref/occ/cl/SKPhysicsJointSpring" title="An SKPhysicsJointSpring object simulates connecting two physics bodies together with a spring." target="_blank">SKPhysicsJointSpring</a>[/xCode] you can adjust the node's responsiveness by experimenting with the spring joints properties of your taste.

After this on updates <strong>you'll adjust this gizmo node's position only</strong> (either directly or trough velocity adjustment) instead of set the draggee node position. So far the most lovable results, I can use this in production.

What most makes this method is the best is that <strong>you can attach the spring joint to the node at the point user touched it</strong>, so having "well-tempered" physics parameters, you can move and even rotate a node with a single touch.]]></content:encoded>
		<excerpt:encoded><![CDATA[Implementing SpriteKit drag could be tricky. On one hand you can find <strong>a running animation</strong> (I’m not sure that it is synced with UIKit touch events), on the other hand you (may) have <strong>a physics simulation</strong> to fit in.]]></excerpt:encoded>
		<wp:post_id>1151</wp:post_id>
		<wp:post_date><![CDATA[2013-08-12 12:57:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-12 12:57:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[spritekit-drag]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-design_"><![CDATA[Code design]]></category>
		<category domain="post_tag" nicename="demistify"><![CDATA[Demistify]]></category>
		<category domain="post_tag" nicename="encapsulation"><![CDATA[Encapsulation]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios7"><![CDATA[iOS7]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="object-oriented"><![CDATA[Object oriented]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="opengl"><![CDATA[OpenGL]]></category>
		<category domain="category" nicename="spritekit"><![CDATA[SpriteKit]]></category>
		<category domain="post_tag" nicename="spritekit"><![CDATA[SpriteKit]]></category>
		<category domain="post_tag" nicename="uikit"><![CDATA[UIKit]]></category>
		<category domain="post_tag" nicename="uiview"><![CDATA[UIView]]></category>
		<category domain="post_tag" nicename="understanding"><![CDATA[Understanding]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[85]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[spritekit drag]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[Implement SpriteKit drag can be tricky. On one hand you can find a running animation, on the other hand you (may) have a physics simulation to fit in.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4739770538]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[Kenny Ackerson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[keackerson@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[162.207.228.7]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-05 12:48:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-05 12:48:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can you please provide a code sample for "Physics-proof multi-touch SpriteKit drag" I can not figure this out ATM, thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386884950.612554073333740234375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386247725.8539459705352783203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005275]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-12 21:51:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-12 21:51:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry to say, but I'm not intended to open the source of my upcoming title. Once it gets released, I probably will extract many code and publish them as part of <a href="https://github.com/eppz/eppz-kit" title="The collection of the usefuls. Objective-C everydayers." target="_blank" rel="nofollow">eppz!kit</a>. Multi-touch dragging will be a part of that for sure.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>62</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386885116.08775997161865234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005275]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005283]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[Kal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kal!@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[99.59.236.80]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-23 20:11:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-23 20:11:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, 
Very nice writeup. Could you please explain what do you mean by Bind / Unbind touches (without updating Sprite position in touchesMoved method) ? I couldn't find any such term when I googled it. 

Thanks,
Kal]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393187634.6985950469970703125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393186305.1185710430145263671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005280]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-23 20:33:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-23 20:33:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, gonna edit the article right away, I'm apparently managing the blog anyway.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>64</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393187635.2746150493621826171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005280]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005404]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[Ofer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ofer.affias@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[2.54.228.230]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-26 14:28:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-26 14:28:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[when saying "Only bind touches..." on the section Multi-touch SpriteKit drag, can you elaborate? 
do you mean keeping UITouch object pointer and re-use it till touch ends?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393424937.6417438983917236328125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393442472.437068939208984375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393442472.9549620151519775390625;s:7:"message";s:45:"eppz changed the comment status to unapproved";s:5:"event";s:17:"status-unapproved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393442582.2277719974517822265625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005278]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_5d25fe697021744816cd8f0944912ca5</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/5d25fe697021744816cd8f0944912ca5</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[5.204.177.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-02-26 19:23:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-02-26 19:23:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, see codes.

Don't think of it as reuse, UITouch objects are living until the touch is present (and moving), also they get updated. Every locationInSomething will give you the momentary locations.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>66</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393442582.7574770450592041015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005278]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005405]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Akshay]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[akshay.zala26@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[220.224.237.3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-01-05 11:38:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-01-05 11:38:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

Thanks for this example.
I am having an error i.e. Property 'touchOffset' not found on object of type 'SKNode *'. in my touchBegun and touchMoves method in MyScene.m file.

so, if you can help me out than it would be very helpful.

Thanks in advance.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112823.4690210819244384765625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420457897.911251068115234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005279]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>iOS 6-7 icon comparison | cross compatible inset shape with rounded corners</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/09/12/ios-6-7-icon-comparison/</link>
		<pubDate>Thu, 12 Sep 2013 10:38:13 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=1220</guid>
		<description/>
		<content:encoded><![CDATA[During my latest icon designing process I wanted to involve a simple inset/inner stroke (also derive further shapes from it later on), so I got into a deeper iOS 6-7 icon comparison to create <strong>a cross compatible inset shape</strong> (with rounded corners) that fits both iOS icon shape well.

<h2><strong>iOS 6-7 icon comparison</strong> at a glance</h2>

There are tons of great articles out there, like <a href="http://www.pixelresort.com/blog/start-making-ios-7-icons-with-the-app-icon-template-3-0/" title="Start making iOS 7 Icons with the App Icon Template 3.0" target="_blank">Start making iOS 7 Icons with the App Icon Template 3.0</a> as my preference, here I am only to depict the iOS 6-7 difference in terms of overall icon shape focused for the chamfer/rounded corner size.

[caption id="attachment_1231" align="alignnone" width="824"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_rounded_corner.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_rounded_corner.png" alt="Comparing iOS 6 7 icon rounded corners there is an annoying offset to do something with it." width="824" height="824" class="size-full wp-image-1231" /></a> Comparing iOS 6 7 icon rounded corners there is an annoying offset to do something with it.[/caption]

For iOS 6 the canonical rounded corner is [xCode]10px[/xCode] considering [xCode]57px[/xCode] icon size. For the iOS 7 the exact formula is still uncovered, though the article mentioned before discussed this topic nicely.

<h2>Determine <strong>pixel perfect</strong> inset size</h2>

As iTunes atrworks needs to be provided in dimension of [xCode]1024px[/xCode], icon designing happens in that size at most. Though, when the icon will be rendered at their live size on the actual design, it is hard to keep the internal layout dimensions pixel perfect. One can create slightly different layout for each device, but that approach can hardly maintan over the time.

iOS 6 icon render dimensions are [xCode]57px[/xCode] for the iPhone/iPod, and [xCode]72px[/xCode] for the iPad (considering @1x). iOS 7 counterparts for these values are [xCode]60px[/xCode] for the iPhone/iPod, and [xCode]76px[/xCode] for the iPad (still considering @1x). Like you can check it all over Google.

As a first step I try to put these values into the [xCode]1024px[/xCode] design context, I derive the design size for 1px in each dimension mentioned above. That gives us iOS 6 iPhone [xCode]17,96491228070175[/xCode], iPad [xCode]14,22222222222222[/xCode], iOS 7 iPhone [xCode]17,06666666666667[/xCode] and iPad is [xCode]13,47368421052632[/xCode]. Such a lovely numbers. No common divisors, so the best I can do is to lay out a pixelgrid for each, then overlay everything and look for any pattern.

[caption id="attachment_1246" align="alignnone" width="816"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_pixel_count.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_pixel_count.png" alt="The actual pixel dimensions of the iOS 6-7 icons are annoyingly diversive." width="816" height="921" class="size-full wp-image-1246" /></a> The actual pixel dimensions of the iOS 6-7 icons are annoyingly diversive.[/caption]

[caption id="attachment_1259" align="alignnone" width="1065"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_icon_comparison_pixel_grid_overlay1.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_icon_comparison_pixel_grid_overlay1.png" alt="Overlaying iOS 6 icon pixel grids. Click for full size!" width="1065" height="1175" class="size-full wp-image-1259" /></a> Overlaying iOS 6 icon pixel grids. <strong>Click for full size!</strong>[/caption]

As you can see on the full size image below, you can see a grid highlight. That means if you measure [xCode]71,5px[/xCode] (square at left top) from the edges in an [xCode]1024px[/xCode] context, it counts [xCode]4px[/xCode] from the edge for iPhone and [xCode]5px[/xCode] for iPad render size with a decent accuracy. Thats a great start. The same method for iOS 7 shows quiet similar figures.

[caption id="attachment_1262" align="alignnone" width="1065"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_7_icon_comparison_pixel_grid_overlay.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_7_icon_comparison_pixel_grid_overlay.png" alt="Overlaying iOS 7 icon pixel grids. Click for full size!" width="1065" height="1175" class="size-full wp-image-1262" /></a> Overlaying iOS 7 icon pixel grids. <strong>Click for full size!</strong>[/caption]

Something similar than before, once you measure [xCode]67,817[/xCode] from the edges at [xCode]1024px[/xCode] context, you'll end up [xCode]4px[/xCode] for the iPhone and [xCode]5px[/xCode] for the iPad.

[caption id="attachment_1264" align="alignnone" width="800"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_7_icon_comparison_pixel_grid_ive_grid_overlay.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_7_icon_comparison_pixel_grid_ive_grid_overlay.png" alt="The first (outermost) overlayed pixel grid highlight shows similarities with the Ive grid suggested by Apple." width="800" height="800" class="size-full wp-image-1264" /></a> The first (outermost) overlayed pixel grid highlight shows similarities with the Ive grid suggested by Apple.[/caption]

Moreover, this grid highlight at [xCode]67,817[/xCode] seems coincidentally covered by the outermost grid line of <a href="http://www.apple.com/ios/design/#icon-draw" title="With iOS 7, every detail warranted the same rigor toward design. Like refining the typography down to the pixel. Redrawing every icon around a new grid system. Sticking to a precise color palette. " target="_blank">Ive icon grid</a>. Actually this is (like all the others) a third party grid, so accuracy is just estimated, but seems fine at the first glance.

[caption id="attachment_1269" align="alignnone" width="601"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_pixel_grid_overlay.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_pixel_grid_overlay.png" alt="Overlaying this grid highlight measurements both for iOS 6 and iOS 7 shows promising similarities." width="601" height="705" class="size-full wp-image-1269" /></a> Overlaying outermost grid highlight measurements both for iOS 6 and iOS 7 shows promising similarities.[/caption]

When overlaying iOS 6 and iOS 7 pixel grids (actually every dimension I've mentioned so far), we can see that the outermost grid highlight falls within a bearable range for every icon pixel dimension. It the terms of the 1024px design context it ranges from [xCode]67,817[/xCode] (iOS 7) to [xCode]71,5px[/xCode] (iOS 6). A cross iOS version compatible outermost inset dimension must take place within this range.

So let's go on with [xCode]70px[/xCode] since it is somewhat in the middle, and easy enough to catch up with.

[caption id="attachment_1281" align="alignnone" width="574"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset.png" alt="The 70px inset size seems to scale down to every device icon size well, even across iOS 6 and 7." width="574" height="574" class="size-full wp-image-1281" /></a> The <strong>70px</strong> inset size seems to scale down to every device icon size well, even across iOS 6 and 7.[/caption]

The tests above made by Photoshop Image size with a simple Bilinear sampling. I tried values from [xCode]67px[/xCode] and seems [xCode]<strong>70px</strong>[/xCode] gives the best result considering every possible icon size. And as a bonus feature it fits the <a href="http://www.apple.com/ios/design/#icon-draw" title="With iOS 7, every detail warranted the same rigor toward design. Like refining the typography down to the pixel. Redrawing every icon around a new grid system. Sticking to a precise color palette." target="_blank">Ive icon grid</a>. Yip.

<h1>Finding cross iOS version <strong>inset shape with rounded corner</strong></h2>

[caption id="attachment_1287" align="alignnone" width="800"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset_rounded_corner.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset_rounded_corner.png" alt="An iOS 6 inset cut into an iOS7 icon shape (bottom left) seems awkward, opposite (bottom right) is bearable for an extent." width="800" height="843" class="size-full wp-image-1287" /></a> An iOS 6 inset cut into an iOS7 icon shape (bottom left) seems awkward, opposite (bottom right) is bearable for an extent.[/caption]

Creating simple inset/inner stroke with this [xCode]<strong>70px</strong>[/xCode] is straightforward, but when trying to fit those shapes into the the other iOS cut size, strange things happen. The truth is somewhere in the middle.

[caption id="attachment_1289" align="alignnone" width="694"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset_rounded_corner_blend.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset_rounded_corner_blend.png" alt="Difference between an iOS 6 and an iOS 7 inset (70px) with rounded corners." width="694" height="694" class="size-full wp-image-1289" /></a> Difference between an iOS 6 and an iOS 7 inset (70px) with rounded corners.[/caption]

[caption id="attachment_1290" align="alignnone" width="600"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset_rounded_corner_blend.gif"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset_rounded_corner_blend.gif" alt="We can experiment with the different intermediate shapes to see which gives the best result." width="600" height="600" class="size-full wp-image-1290" /></a> We can experiment with the different intermediate shapes to see which gives the best result.[/caption]

Since iOS 7 inset shape fits better into the iOS 6 cut, we should push the iOS 7 inset toward the iOS 6 shape, and see if we can live with the result. After some comparisons, seems the best is to use the value in the middle. 

[caption id="attachment_1293" align="alignnone" width="800"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/eppz-shape.zip"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/ios_6_7_icon_comparison_70px_inset_rounded_corner_eppz_shape.png" alt="click to download" width="800" height="426" class="size-full wp-image-1293" /></a> The result seems satisfactory with both iOS 6 and iOS 7 icon shape cut (click to download).[/caption]

Phew. A shape with such a charming personality deserves a name after such a cumbersome coming to light, eppz! shape will be fine for now. Gonna change the company logo shape on the top soon, so the whole stuff comes to a full circle.

Once you want to create a cross iOS version inset with rounded corners, do not hesitate to use this setup. <a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/09/eppz-shape.zip" title="click to download">The illustrator file is around here</a> or on the image above.

[note]Since I'm gonna use it in a production design, will update with the designs soon.[/note]
]]></content:encoded>
		<excerpt:encoded><![CDATA[During my latest icon designing process I wanted to involve a simple inset/inner stroke (also derive further shapes from it later on), so I got into a deeper iOS 6-7 icon comparison to create <strong>a cross compatible inset shape</strong> (with rounded corners) that fits both iOS icon shape well.]]></excerpt:encoded>
		<wp:post_id>1220</wp:post_id>
		<wp:post_date><![CDATA[2013-09-12 10:38:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-12 10:38:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ios-6-7-icon-comparison]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="design"><![CDATA[Design]]></category>
		<category domain="category" nicename="goodies"><![CDATA[Goodies]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios7"><![CDATA[iOS7]]></category>
		<category domain="post_tag" nicename="wireframe"><![CDATA[Wireframe]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[xCode]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[ios 6-7 icon comparison]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[I got into a deeper iOS 6-7 icon comparison to create a cross compatible inset shape (with rounded corners) that fits both iOS icon shape well.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1781]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4739776606]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UIImage from SpriteKit scene</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/10/09/uiimage-from-spritekit-scene/</link>
		<pubDate>Wed, 09 Oct 2013 12:40:12 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=1316</guid>
		<description/>
		<content:encoded><![CDATA[Sometimes you find yourself in a situation, when you need to snapshot a [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIImage_Class/Reference/Reference.html" title="A UIImage object is a high-level way to display image data." target="_blank">UIImage</a>[/xCode] from [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SpriteKitFramework_Ref/_index.html" title="Sprite Kit is a graphics rendering and animation infrastructure that you can use to animate arbitrary textured images, otherwise known as sprites." target="_blank">SpriteKit</a>[/xCode], to export into the Photo Library, or a thumbnail to show up somewhere, or probably more often a shot just to blur it while you overlay some transparent [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIKit_Framework/_index.html" title="The UIKit framework provides the classes needed to construct and manage an application’s user interface for iOS." target="_blank">UIKit</a>[/xCode] content on the top of it. I was just in such situation lately, and after some trial and error I ended up with a [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIImage_Class/Reference/Reference.html" title="A UIImage object is a high-level way to display image data." target="_blank">UIImage</a>[/xCode].

This article can spare you this exploring period. If you're in a hurry, just scroll to the end. Anyway, if you're in a hurry you probably do not even read this intro paragraph.

<h2>UIImage from SpriteKit <strong>using SKTexture</strong></h2>

This approach was the first try, since I recalled an [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKView/Reference/Reference.html#//apple_ref/doc/uid/TP40013031" title="An SKView object is a view that displays Sprite Kit content." target="_blank">SKView</a>[/xCode] method [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKView/Reference/Reference.html#//apple_ref/occ/instm/SKView/textureFromNode:" title="Renders and returns a Sprite Kit texture that contains the node’s contents." target="_blank">-textureFromNode:</a>[/xCode] that takes an [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKTexture_Ref/Reference/Reference.html#//apple_ref/doc/uid/TP40013027" title="An SKTexture object is an image that can be applied to SKSpriteNode objects or particles created by a SKEmitterNode object." target="_blank">SKTexture</a>[/xCode] snapshot of any node. As this is something resulting in a bitmap, it was seemingly a good starting point.

Exported a texture of the whole scene, then the story ends here. I was using snapshot to apply a gaussian blur filter, so I put a sprite with this snapshot into an [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKEffectNode_Ref/Reference/Reference.html#//apple_ref/doc/uid/TP40013020" title="An SKEffectNode object applies a Core Image filter to its rendered output, allowing you to incorporate sophisticated special effects in a scene." target="_blank">SKEffectNode</a>[/xCode], then applied a [xCode]<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIFilter_Class/Reference/Reference.html" title="The CIFilter class produces a CIImage object as output." target="_blank">CIFilter</a>[/xCode].

Every [xCode]<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIFilter_Class/Reference/Reference.html" title="The CIFilter class produces a CIImage object as output." target="_blank">CIFilter</a>[/xCode] has an [xCode]<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIFilter_Class/Reference/Reference.html#//apple_ref/occ/instp/CIFilter/outputImage" title="Returns a CIImage object that encapsulates the operations configured in the filter." target="_blank">outputImage</a>[/xCode] property that holds an image of the result. Even the first sentence of the documentation goes "The [xCode]CIFilter[/xCode] class produces a [xCode]CIImage[/xCode] object as output.", <strong>but any [xCode]<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIFilter_Class/Reference/Reference.html" title="The CIFilter class produces a CIImage object as output." target="_blank">CIFilter</a>[/xCode] in [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SpriteKitFramework_Ref/_index.html" title="Sprite Kit is a graphics rendering and animation infrastructure that you can use to animate arbitrary textured images, otherwise known as sprites." target="_blank">SpriteKit</a>[/xCode] just do not hold any output image after processing</strong>. I made several attempts, [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIKit_Framework/_index.html" title="The UIKit framework provides the classes needed to construct and manage an application’s user interface for iOS." target="_blank">UIKit</a>[/xCode] comparisons, but without results.

<h2>UIImage from SpriteKit <strong>using Core Animation renderInContext</strong></h2>

Next attempt was the classic solution, render the [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKView/Reference/Reference.html#//apple_ref/doc/uid/TP40013031" title="An SKView object is a view that displays Sprite Kit content." target="_blank">SKView</a>[/xCode] layer into a new image context using [xCode]<a href="https://developer.apple.com/library/ios/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html" title="The CALayer class manages image-based content and allows you to perform animations on that content." target="_blank">CALayer</a>[/xCode] method [xCode]<a href="https://developer.apple.com/library/ios/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instm/CALayer/renderInContext:" title="Renders the receiver and its sublayers into the specified context." target="_blank">renderInContext</a>[/xCode]. Like many snapshot during the past years, the code just goes below.

<pre>
-(UIImage*)snapshot
{
    // Captures UIKit content only.
    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale);
    [self.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *snapshotImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return snapshotImage;
}
</pre>

But the resulting image was empty. To be more precise, the [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIKit_Framework/_index.html" title="The UIKit framework provides the classes needed to construct and manage an application’s user interface for iOS." target="_blank">UIKit</a>[/xCode] subviews of the [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKView/Reference/Reference.html#//apple_ref/doc/uid/TP40013031" title="An SKView object is a view that displays Sprite Kit content." target="_blank">SKView</a>[/xCode] were exported, but <strong>the scene content just did not showed up on the snapshot</strong>.

Probably the scene just did not rendered for that run loop frame at the time the layers were rendered. Maybe with putting this method to the very end of the run loop somehow it could be the solutiong, but there is a more simple yet iOS 7 only method out there.

<h2>UIImage from SpriteKit <strong>using iOS 7 UIKit features</strong></h2>

Unlike the above, <strong>this method works</strong>.

<pre>
-(UIImage*)snapshot
{
    // Captures SpriteKit content!
    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, [UIScreen mainScreen].scale);
    [self drawViewHierarchyInRect:self.bounds afterScreenUpdates:YES];
    UIImage *snapshotImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return snapshotImage;
}
</pre>

There are some new method providing screenshots of [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html" title="The UIView class defines a rectangular area on the screen and the interfaces for managing the content in that area." target="_blank">UIView</a>[/xCode] hierarchies in iOS 7, possibly Apple engineers noticed nearly the same as just we do. <strong>So iOS 7 introduces a method [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html#//apple_ref/occ/instm/UIView/drawViewHierarchyInRect:afterScreenUpdates:" title="Renders a snapshot of the complete view hierarchy as visible onscreen into the current context." target="_blank">-drawViewHierarchyInRect:afterScreenUpdates:</a>[/xCode] that captures the content of a [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html" title="The UIView class defines a rectangular area on the screen and the interfaces for managing the content in that area." target="_blank">UIView</a>[/xCode] after the screen has updated for that frame.</strong> At that time the [xCode]<a href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKView/Reference/Reference.html#//apple_ref/doc/uid/TP40013031" title="An SKView object is a view that displays Sprite Kit content." target="_blank">SKView</a>[/xCode] content is rendered, so is captured into the snapshot. Once you have the snapshot in the context, [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIImage_Class/Reference/Reference.html" title="A UIImage object is a high-level way to display image data." target="_blank">UIImage</a>[/xCode] exporting goes like it used to be.

[note]As you may noticed, this method has a bounds input that can capture the view content into a smaller image than the original view. <strong>This input is suitable for performance optimization, especially when you're to blur the resulting image.</strong> A blurred view simply don't have to be full sized, since upscaling is hardly noticable on the blurred images. The image quality per performance trade is the matter of your taste here. Another article here called <strong><a href="http://eppz.eu/blog/create-ios-7-blur-effect/" title="Blurred overlay effect itself was at the table for ages, though, incorporating it in iOS 7 gave a huge shot to it’s popularity. Creating an iOS 7 blur effect basically involves two step, create a snapshot of the underlying content of some context, and apply a blur on it." target="_blank">Create iOS 7 blur effect with latest APIs</a></strong> just discuss this issue.
[/note]

Happy scene exporting for everyone.]]></content:encoded>
		<excerpt:encoded><![CDATA[Sometimes you find yourself in a situation, when you need to <strong>snapshot a UIImage from SpriteKit</strong>, to export into the Photo Library, or a thumbnail to show up somewhere, or probably more often a shot just to blur it while you overlay some transparent UIKit content on the top of it. I was just in such situation lately, and after some trial and error I ended up with a UIImage.]]></excerpt:encoded>
		<wp:post_id>1316</wp:post_id>
		<wp:post_date><![CDATA[2013-10-09 12:40:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-09 12:40:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[uiimage-from-spritekit-scene]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios7"><![CDATA[iOS7]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="opengl"><![CDATA[OpenGL]]></category>
		<category domain="category" nicename="spritekit"><![CDATA[SpriteKit]]></category>
		<category domain="post_tag" nicename="spritekit"><![CDATA[SpriteKit]]></category>
		<category domain="post_tag" nicename="uikit"><![CDATA[UIKit]]></category>
		<category domain="post_tag" nicename="uiview"><![CDATA[UIView]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[83]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[UIImage from SpriteKit]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[Snapshot a UIImage from SpriteKit, to export into the Photo Library, or a thumbnail to show up somewhere, or probably more often a shot just to blur it.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[uiimage-from-a-spritekit-scene]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4739770372]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[Stuart Welsh]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[stuartwelsh1984@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.107.100.220]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-31 17:02:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-31 17:02:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is it possible to get a UIImage from just a sprite as opposed to a view or scene?

I've tried using textureFromNode but this doesn't work when using a retina display.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1388509358.6764659881591796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389343314.0226719379425048828125;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005088]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-01-10 08:45:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-01-10 08:45:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd just attempt the same, starting with textureFromNode. Try official SpriteKit forum at https://devforums.apple.com/community/ios/graphics/spritekit.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>71</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389343557.5090820789337158203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005088]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005091]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
	</item>
	<item>
		<title>Simplest way to load UIView from Xib files</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/10/11/uiview-from-xib-simplest/</link>
		<pubDate>Fri, 11 Oct 2013 12:22:59 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=1347</guid>
		<description/>
		<content:encoded><![CDATA[[caption id="attachment_1379" align="alignnone" width="1156"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/UIView_from_Xib_tangram.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/UIView_from_Xib_tangram.png" alt="Custom views are best maintainable in separate Xib files, so a convenient workflow for loading UIView from Xib is gold." width="1156" height="1156" class="size-full wp-image-1379" /></a> Custom views are best maintainable in separate Xib files, so a convenient workflow for loading UIView from Xib is gold.[/caption]

This method is simple.

<pre>
//Wow!
[[self.view addSubview:[MenuView loadFromNib]];
</pre>

It takes only a single class to setup, so if you're in a hurry just <a href="https://github.com/eppz/UIView-from-Xib" title="UIView from Xib" target="_blank">grab the files from GitHub</a>, and take a sudden look at the Xib setup image below.

[github message="Use" name="eppz! UIView from Xib" url="https://github.com/eppz/UIView-from-Xib"]

<h2>The lightweight setup to load <strong>UIView from Xib</strong></h2>

The method has three role player. First, <strong>an Interface Builder Xib file</strong> that holds a configured view we want to load. The middle player is a smart but death simple helper object <strong>[xCode]<a href="https://github.com/eppz/UIView-from-Xib/blob/master/EPPZViewInstantiator.h" title="UIView from Xib" target="_blank">EPPZViewInstantiator</a>[/xCode]</strong> with the sole purpose of load a Nib file, and have a reference to a view in it. The third is a tiny [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html" title="The UIView class defines a rectangular area on the screen and the interfaces for managing the content in that area." target="_blank">UIView</a>[/xCode] category [xCode]<a href="https://github.com/eppz/UIView-from-Xib/blob/master/EPPZViewInstantiator.h#L25" title="UIView from Xib" target="_blank">(Instantiate)</a>[/xCode] that uses the previous helper object to provide the lovely [xCode]<a href="https://github.com/eppz/UIView-from-Xib/blob/master/EPPZViewInstantiator.h#L27" title="UIView from Xib" target="_blank">+loadFromNibNamed:</a>[/xCode] method. Also has an alias <strong>[xCode]<a href="https://github.com/eppz/UIView-from-Xib/blob/master/EPPZViewInstantiator.h#L26" title="UIView from Xib" target="_blank">+loadFromNib</a>[/xCode]</strong> that tries to load the view from a Xib file having the class name as the file name.

In the Xib file the setup is easy. Just <strong>set the File's Owner class to [xCode]<a href="https://github.com/eppz/UIView-from-Xib/blob/master/EPPZViewInstantiator.h#L25" title="UIView from Xib" target="_blank">(Instantiate)</a>[/xCode]</strong> and bind the view you want to load to it's [xCode]view[/xCode] outlet.

[caption id="attachment_1354" align="alignnone" width="313"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/UIView_from_Xib.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/UIView_from_Xib.png" alt="UIView from Xib - Just hook up the view you want to instantiate with the view outlet of File&#039;s Owner." width="313" height="287" class="size-full wp-image-1354 noShadow" /></a> Just hook up the view you want to instantiate with the view outlet of File's Owner.[/caption]

You may noticed that the [xCode]MenuView[/xCode] above is embedded into a wrapper view. By this trick <strong>you can define the position of the view in it's superview</strong> contained in the Xib file. This setup can ensure that [xCode]MenuView[/xCode] can have a <strong>frame</strong> property right after loaded from the Xib, so you don't have to nudge the instance in by code in the controller that is to use [xCode]MenuView[/xCode].

If you feel explorous, you can see all the prequisites that lead to this solution in a previous post <a href="http://eppz.eu/blog/uiview-from-xib/" title="After the past few years I found that the only manageable way for creating/maintaining view (or any UI element in more general) is to instantiate the UIView from Xib file. " target="_blank">5 approach to load UIView from Xib</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[The method has three role player. First, an <strong>Interface Builder Xib file</strong> that holds a configured view we want to load. The middle player is a smart but <strong>death simple helper object</strong> EPPZViewInstantiator with the sole purpose of load a Nib file, and have a reference to a view in it. The third is <strong>a tiny UIView category</strong>.]]></excerpt:encoded>
		<wp:post_id>1347</wp:post_id>
		<wp:post_date><![CDATA[2013-10-11 12:22:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-11 12:22:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[uiview-from-xib-simplest]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="advanced"><![CDATA[Advanced]]></category>
		<category domain="post_tag" nicename="code-design_"><![CDATA[Code design]]></category>
		<category domain="post_tag" nicename="encapsulation"><![CDATA[Encapsulation]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="nib"><![CDATA[NIB]]></category>
		<category domain="post_tag" nicename="object-oriented"><![CDATA[Object oriented]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<category domain="post_tag" nicename="uikit"><![CDATA[UIKit]]></category>
		<category domain="post_tag" nicename="uiview"><![CDATA[UIView]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[xCode]]></category>
		<category domain="post_tag" nicename="xib"><![CDATA[XIB]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[91]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[UIView from Xib]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[This method is this simple. It takes only a single class to setup a charming workflow that loads UIView from Xib. Just use -loadFromNib;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[uiview-from-xib-s]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1776]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4745199151]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[5 approach to load UIView from Xib | eppz!]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://eppz.eu/blog/uiview-from-xib/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[151.236.0.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-10-13 01:59:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-10-13 01:59:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] If you&#8217;re not feeling that explorous, you could skip to the article that tops up these method introducing Simplest way to load UIView from Xib. [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381629573.589282989501953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381706278.3729400634765625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[Martin Varendorff]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Familie.Varendorff@t-online.de]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[62.158.210.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-12 20:19:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-12 20:19:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like your construct, which moves away boilerplate code.
This works very nicely for cells, which contain content, but when you add a button (like DeleteCell) 
to such a cell on the Xib, you have trouble hooking the button up with the controller,
since the controller is not the file's owner of the xib file.
And the Class for the cell has only access to the model for the cell, but not for the entire model, so it does not
know how to delta a cell within the model.
Do you have an elegant solution for this situation?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386883481.3845770359039306640625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386879594.7139899730682373046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005326]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-12 21:29:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-12 21:29:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>For hooking up actions:</strong>

You can define the IBAction on the cell subclass itself, making the cell it's own controller as well (in IB you won't hook up action to the file's owner, but to the cell). This makes sense, as "external" parties should have no idea about what user interaction is going on within a cell, maybe you can wire in a delegate callback, like cellDidRequestDelete:(MyCellClass*) cell; or something.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386883789.2790410518646240234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005322]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>76</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-12 21:37:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-12 21:37:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>For the model shifting</strong>:

I'm not really get what you mean by "delta a cell within the model".

You may equip your model objects with many features, like -(MyItem*)previousItem;, -(MyItem*)nextItem; -(MyItem*)itemForIndex; and such. Also you should put a weak reference to the parent item of every model object, so you can query the containing collection for neighbouring items (all implemented in the model).

So once you clarify the situation, I'd be more than happy to figure out some gently encapsulated design.

Until than you may want to take a look on http://eppz.eu/blog/custom-uitableview-cell/ where I laid out a similar design with cells.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386884247.186489105224609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005319]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-12 21:47:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-12 21:47:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[(this comment UI really sucks anyway, maybe I'll adjust some CSS later on)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386884840.136168003082275390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005325]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[grig]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[grig@lumeneo.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[50.168.102.197]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-06 22:45:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-06 22:45:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is really unclear. Moving on to another way.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394145907.8660700321197509765625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394186308.3434178829193115234375;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005323]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[5.204.28.222]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-07 10:01:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-07 10:01:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You gonna probably do something like one of these: http://eppz.eu/blog/uiview-from-xib/
After that you'll find that rather clear, and encapsulated (!) way, I bet.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>78</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394186507.5431439876556396484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005323]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005329]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[Mocode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mocode@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[155.201.35.55]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-22 12:48:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-22 12:48:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice work! Just shows that elegence and awesome code need not be complex,.
Very innovative my friend!.
-mocode]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398170914.547894001007080078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398180916.42920207977294921875;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005324]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[eppz]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hello@eppz.eu]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[213.222.154.178]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-22 15:37:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-22 15:37:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks there! I bet you'd like some other posts around here as well then.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>80</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1398181036.6363689899444580078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005324]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005328]]></wp:meta_value>
			</wp:commentmeta>
		<dsq:remote xmlns:dsq="http://disqus.com/disqus-internals"><dsq:id>eppz_blog_imported_user_72a5ed2913e55098130bc801272ef85c</dsq:id><dsq:avatar>http://www.gravatar.com/avatar/72a5ed2913e55098130bc801272ef85c</dsq:avatar></dsq:remote></wp:comment>
	</item>
	<item>
		<title>Create iOS 7 blur effect with latest APIs</title>
		<link>http://sandbox.blog.eppz.eu/index.php/2013/10/21/create-ios-7-blur-effect/</link>
		<pubDate>Mon, 21 Oct 2013 21:03:36 +0000</pubDate>
		<dc:creator><![CDATA[eppz]]></dc:creator>
		<guid isPermaLink="false">http://eppz.eu/blog/?p=1389</guid>
		<description/>
		<content:encoded><![CDATA[Blurred overlay effect itself was at the table for ages, though, incorporating it in iOS 7 gave a huge shot to it's popularity. <strong>Creating an iOS 7 blur effect</strong> basically involves two step, create a snapshot of the underlying content of some context, and apply a blur on it. There are numerous approach out there for each, this solution involves some fresh APIs.

[caption id="attachment_1417" align="alignnone" width="1124"]<a href="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/creating_ios_7_blur_effect_with_latest_APIs.png"><img src="http://sandbox.blog.eppz.eu/wp-content/uploads/2013/10/creating_ios_7_blur_effect_with_latest_APIs.png" alt="There are numerous approach out there to create iOS 7 blur effect, this solution involves some fresh iOS 7 UIView APIs, along with new GPUImage filters." width="1124" height="570" class="size-full wp-image-1417" /></a> There are numerous approach out there to create iOS 7 blur effect, this solution involves some fresh iOS 7 UIView APIs, along with new GPUImage filters.[/caption]

<h2>Create <strong>UIView snapshot</strong> with the new iOS 7 UIView API</h2>

I suspect the iOS 7 blur effect itself as the root cause of these iOS 7 [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html" title="The UIView class defines a rectangular area on the screen and the interfaces for managing the content in that area." target="_blank">UIView</a>[/xCode] APIs. With iOS 7 every [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html" title="The UIView class defines a rectangular area on the screen and the interfaces for managing the content in that area." target="_blank">UIView</a>[/xCode] has some handy methods to provide <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html#//apple_ref/doc/uid/TP40006816-CH3-SW203" title="Capturing a View Snapshot" target="_blank">Capturing a View Snapshot </a>.

The method [xCode]<a href="https://developer.apple.com/library/ios/documentation/uikit/reference/uiview_class/UIView/UIView.html#//apple_ref/occ/instm/UIView/drawViewHierarchyInRect:afterScreenUpdates:" title="Renders a snapshot of the complete view hierarchy as visible onscreen into the current context." target="_blank">drawViewHierarchyInRect:afterScreenUpdates:</a>[/xCode] provides nearly the same as it's [xCode]<a href="https://developer.apple.com/library/ios/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html" title="The CALayer class manages image-based content and allows you to perform animations on that content." target="_blank">CALayer</a>[/xCode] predecessor [xCode]<a href="https://developer.apple.com/library/ios/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instm/CALayer/renderInContext:" title="Renders the receiver and its sublayers into the specified context." target="_blank">renderInContext:</a>[/xCode], but this one captures the actual onscreen content (this is the only way to capture SpriteKit content for example).

So the first step of creating iOS 7 blur effect looks like this.

<pre>
// Snapshot scene into a UIImage.
UIGraphicsBeginImageContext(snapshotBounds.size);
[self drawViewHierarchyInRect:snapshotBounds afterScreenUpdates:YES];
UIImage *snapshotImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
</pre>

[note]You can specify a smaller bounding rectangle for the snapshot, by which you can trade some performance. A blurred image actually don't have to be at full resolution, since users can hardly perceive the difference.[/note]

<h2><strong>Using GPUImage blur filters</strong> to create iOS 7 blur effect</h2>

Apply blur to this image can be done several ways, like using [xCode]<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIFilter_Class/Reference/Reference.html#//apple_ref/occ/cl/CIFilter" title="The CIFilter class produces a CIImage object as output. Typically, a filter takes one or more images as input." target="_blank">CIFilter</a>[/xCode], or some <a href="https://github.com/tomsoft1/StackBluriOS" title="This is a StackBlur implementation for iOS based on the algorithm of Mario Klingemann." target="_blank">iOS Stack blur implementation</a>. Though, my preference is <a href="https://github.com/BradLarson/GPUImage" title="The GPUImage framework is a BSD-licensed iOS library that lets you apply GPU-accelerated filters and other effects to images, live camera video, and movies." target="_blank">Brad Larson's GPUImage</a>, especially since it has released an update on the other day that incorporates an API called [xCode]<a href="https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageiOSBlurFilter.h" title="An attempt to replicate the background blur used on iOS 7 in places like the control center." target="_blank">GPUImageiOSBlurFilter</a>[/xCode].

<strong>The main reason picking this library is performace.</strong> Every processing inside is implemented in vanilla OpenGL, so it hardly can be more performant actually. The library is well maintained, and must say it has way more capabilities beyond this blur effect anyway. So hook up the static library in your project and apply the effect to the snapshot created before with three lines.

<pre>
// Create filter.
self.blurFilter = [GPUImageiOSBlurFilter new];

// Apply filter.
UIImage *blurredSnapshotImage = [self.blurFilter imageByFilteringImage:snapshotImage];
</pre>

There you go, now you can use it in your hierarchy of your taste. You can still experiment with other blur implementations this frameworks provides, like [xCode]<a href="https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageGaussianBlurFilter.h" title="A hardware-optimized, variable-radius Gaussian blur." target="_blank">GPUImageGaussianBlurFilter</a>[/xCode] or [xCode]<a href="https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageBoxBlurFilter.h" title="A hardware-optimized, variable-radius box blur." target="_blank">GPUImageBoxBlurFilter</a>[/xCode].

[note]You may take a look into the <a href="https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageiOSBlurFilter.h" title="An attempt to replicate the background blur used on iOS 7 in places like the control center." target="_blank">GPUImageiOSBlurFilter</a> parameters to finetune results once feeling exporous to. My favourite is <a href="https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageiOSBlurFilter.h#L24" title="The degree to which to downsample, then upsample the incoming image to minimize computations within the Gaussian blur." target="_blank">downsampling</a> that scales down the image before blur, then scale back the result when done. This is nearly the same consideration that underlies beneath capturing a smaller view snapshot I suggested before.[/note]]]></content:encoded>
		<excerpt:encoded><![CDATA[Blurred overlay effect itself was at the table for ages, though, incorporating it in iOS 7 gave a huge shot to it’s popularity. Creating an iOS 7 blur effect basically involves two step, create <strong>a snapshot</strong> of the underlying content of some context, and <strong>apply a blur</strong> on it. There are numerous approach out there, this solution involves some fresh APIs.]]></excerpt:encoded>
		<wp:post_id>1389</wp:post_id>
		<wp:post_date><![CDATA[2013-10-21 21:03:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-21 21:03:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[create-ios-7-blur-effect]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="advanced"><![CDATA[Advanced]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
		<category domain="post_tag" nicename="gpuimage"><![CDATA[GPUImage]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios7"><![CDATA[iOS7]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[Objective-C]]></category>
		<category domain="post_tag" nicename="opengl"><![CDATA[OpenGL]]></category>
		<category domain="category" nicename="snippets"><![CDATA[Snippets]]></category>
		<category domain="post_tag" nicename="spritekit"><![CDATA[SpriteKit]]></category>
		<category domain="post_tag" nicename="uikit"><![CDATA[UIKit]]></category>
		<category domain="post_tag" nicename="uiview"><![CDATA[UIView]]></category>
		<category domain="post_tag" nicename="understanding"><![CDATA[Understanding]]></category>
		<category domain="category" nicename="your-picks"><![CDATA[Your picks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
			<wp:meta_value><![CDATA[94]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1773]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
			<wp:meta_value><![CDATA[ios 7 blur effect]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
			<wp:meta_value><![CDATA[There are numerous approach out there to create iOS 7 blur effect, this solution involves some fresh iOS 7 UIView APIs, along with new GPUImage filters.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[create-ios-7-blur]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[dsq_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[4739770637]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>82</wp:comment_id>
			<wp:comment_author><![CDATA[UIImage from SpriteKit scene | eppz!]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://eppz.eu/blog/uiimage-from-spritekit-scene/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[5.159.233.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-10-28 10:53:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-10-28 10:53:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] image quality per performance trade is the matter of your taste here. Another article here called Create iOS 7 blur effect with latest APIs just discuss this [...]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383226233.2548010349273681640625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1382957611.6954610347747802734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>83</wp:comment_id>
			<wp:comment_author><![CDATA[Aubada]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[aubada@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url/>
			<wp:comment_author_IP><![CDATA[82.212.94.147]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-08-25 08:58:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-08-25 08:58:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for the useful article but how can I blur just a specified area of the image]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408957082.4960930347442626953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415578638.84772491455078125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1421112727.0629980564117431640625;s:7:"message";s:43:"eppz changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"eppz";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_parent_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[dsq_post_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[2619005377]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
